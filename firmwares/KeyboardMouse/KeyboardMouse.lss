
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000012c4  00001358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  00800120  00800120  00001378  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ac6  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019d3  00000000  00000000  0000713a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033bd  00000000  00000000  00008b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000830  00000000  00000000  0000becc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002345  00000000  00000000  0000c6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037ff  00000000  00000000  0000ea41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  00012240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
       2:	00 00       	nop
       4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__bad_interrupt>
       6:	00 00       	nop
       8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__bad_interrupt>
       e:	00 00       	nop
      10:	cf c0       	rjmp	.+414    	; 0x1b0 <__bad_interrupt>
      12:	00 00       	nop
      14:	cd c0       	rjmp	.+410    	; 0x1b0 <__bad_interrupt>
      16:	00 00       	nop
      18:	cb c0       	rjmp	.+406    	; 0x1b0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c9 c0       	rjmp	.+402    	; 0x1b0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c7 c0       	rjmp	.+398    	; 0x1b0 <__bad_interrupt>
      22:	00 00       	nop
      24:	c5 c0       	rjmp	.+394    	; 0x1b0 <__bad_interrupt>
      26:	00 00       	nop
      28:	c3 c0       	rjmp	.+390    	; 0x1b0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c5       	rjmp	.+2586   	; 0xa48 <__vector_11>
      2e:	00 00       	nop
      30:	bf c0       	rjmp	.+382    	; 0x1b0 <__bad_interrupt>
      32:	00 00       	nop
      34:	bd c0       	rjmp	.+378    	; 0x1b0 <__bad_interrupt>
      36:	00 00       	nop
      38:	bb c0       	rjmp	.+374    	; 0x1b0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b7 c0       	rjmp	.+366    	; 0x1b0 <__bad_interrupt>
      42:	00 00       	nop
      44:	b5 c0       	rjmp	.+362    	; 0x1b0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b3 c0       	rjmp	.+358    	; 0x1b0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b1 c0       	rjmp	.+354    	; 0x1b0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	af c0       	rjmp	.+350    	; 0x1b0 <__bad_interrupt>
      52:	00 00       	nop
      54:	ad c0       	rjmp	.+346    	; 0x1b0 <__bad_interrupt>
      56:	00 00       	nop
      58:	ab c0       	rjmp	.+342    	; 0x1b0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	07 c2       	rjmp	.+1038   	; 0x46c <__vector_23>
      5e:	00 00       	nop
      60:	a7 c0       	rjmp	.+334    	; 0x1b0 <__bad_interrupt>
      62:	00 00       	nop
      64:	a5 c0       	rjmp	.+330    	; 0x1b0 <__bad_interrupt>
      66:	00 00       	nop
      68:	a3 c0       	rjmp	.+326    	; 0x1b0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a1 c0       	rjmp	.+322    	; 0x1b0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9f c0       	rjmp	.+318    	; 0x1b0 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	2a 03 55 00 4e 00 4f 00 2d 00 4b 00 56 00 4d 00     *.U.N.O.-.K.V.M.
      84:	20 00 49 00 6e 00 70 00 75 00 74 00 20 00 44 00      .I.n.p.u.t. .D.
      94:	65 00 76 00 69 00 63 00 65 00 00 00                 e.v.i.c.e...

000000a0 <ManufacturerString>:
      a0:	12 03 53 00 61 00 72 00 64 00 65 00 6c 00 6b 00     ..S.a.r.d.e.l.k.
      b0:	61 00 00 00                                         a...

000000b4 <LanguageString>:
      b4:	04 03 09 04                                         ....

000000b8 <ConfigurationDescriptor>:
      b8:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
      c8:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
      d8:	00 05 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
      e8:	01 22 32 00 07 05 83 03 08 00 05                    ."2........

000000f3 <DeviceDescriptor>:
      f3:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     103:	00 01                                               ..

00000105 <KeyboardReport>:
     105:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     115:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     125:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     135:	26 ff 00 05 07 19 00 29 ff 95 06 75 08 81 00 c0     &......)...u....

00000145 <MouseReport>:
     145:	05 01 09 02 a1 01 09 01 a1 00 95 03 75 01 05 09     ............u...
     155:	19 01 29 03 15 00 25 01 81 02 95 01 75 05 81 01     ..)...%.....u...
     165:	75 08 95 02 05 01 09 30 09 31 15 81 25 7f 81 06     u......0.1..%...
     175:	c0 c0 00                                            ...

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d2 e0       	ldi	r29, 0x02	; 2
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e4 ec       	ldi	r30, 0xC4	; 196
     18c:	f2 e1       	ldi	r31, 0x12	; 18
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a0 32       	cpi	r26, 0x20	; 32
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	22 e0       	ldi	r18, 0x02	; 2
     19c:	a0 e2       	ldi	r26, 0x20	; 32
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a0 35       	cpi	r26, 0x50	; 80
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	7f d0       	rcall	.+254    	; 0x2aa <main>
     1ac:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	27 cf       	rjmp	.-434    	; 0x0 <__vectors>

000001b2 <LEDs_SetAllLEDs>:
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     1b2:	9b b1       	in	r25, 0x0b	; 11
     1b4:	90 63       	ori	r25, 0x30	; 48
     1b6:	80 95       	com	r24
     1b8:	89 23       	and	r24, r25
     1ba:	8b b9       	out	0x0b, r24	; 11
     1bc:	08 95       	ret

000001be <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     1be:	fc 01       	movw	r30, r24
     1c0:	e0 58       	subi	r30, 0x80	; 128
     1c2:	ff 4f       	sbci	r31, 0xFF	; 255
     1c4:	a0 81       	ld	r26, Z
     1c6:	b1 81       	ldd	r27, Z+1	; 0x01
     1c8:	6c 93       	st	X, r22
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     1ca:	a0 81       	ld	r26, Z
     1cc:	b1 81       	ldd	r27, Z+1	; 0x01
     1ce:	9d 01       	movw	r18, r26
     1d0:	2f 5f       	subi	r18, 0xFF	; 255
     1d2:	3f 4f       	sbci	r19, 0xFF	; 255
     1d4:	31 83       	std	Z+1, r19	; 0x01
     1d6:	20 83       	st	Z, r18
     1d8:	2e 17       	cp	r18, r30
     1da:	3f 07       	cpc	r19, r31
     1dc:	21 f4       	brne	.+8      	; 0x1e6 <RingBuffer_Insert+0x28>
			  Buffer->In = Buffer->Buffer;
     1de:	12 96       	adiw	r26, 0x02	; 2
     1e0:	9c 93       	st	X, r25
     1e2:	8e 93       	st	-X, r24
     1e4:	11 97       	sbiw	r26, 0x01	; 1

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1e6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1e8:	f8 94       	cli
			{
				Buffer->Count++;
     1ea:	fc 01       	movw	r30, r24
     1ec:	ec 57       	subi	r30, 0x7C	; 124
     1ee:	ff 4f       	sbci	r31, 0xFF	; 255
     1f0:	80 81       	ld	r24, Z
     1f2:	8f 5f       	subi	r24, 0xFF	; 255
     1f4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1f6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     1f8:	08 95       	ret

000001fa <RingBuffer_Remove>:
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     1fa:	dc 01       	movw	r26, r24
     1fc:	ae 57       	subi	r26, 0x7E	; 126
     1fe:	bf 4f       	sbci	r27, 0xFF	; 255
     200:	ed 91       	ld	r30, X+
     202:	fc 91       	ld	r31, X
     204:	11 97       	sbiw	r26, 0x01	; 1
     206:	21 91       	ld	r18, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     208:	11 96       	adiw	r26, 0x01	; 1
     20a:	fc 93       	st	X, r31
     20c:	ee 93       	st	-X, r30
     20e:	ac 01       	movw	r20, r24
     210:	40 58       	subi	r20, 0x80	; 128
     212:	5f 4f       	sbci	r21, 0xFF	; 255
     214:	e4 17       	cp	r30, r20
     216:	f5 07       	cpc	r31, r21
     218:	11 f4       	brne	.+4      	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
			  Buffer->Out = Buffer->Buffer;
     21a:	8d 93       	st	X+, r24
     21c:	9c 93       	st	X, r25

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     21e:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     220:	f8 94       	cli
			{
				Buffer->Count--;
     222:	fc 01       	movw	r30, r24
     224:	ec 57       	subi	r30, 0x7C	; 124
     226:	ff 4f       	sbci	r31, 0xFF	; 255
     228:	90 81       	ld	r25, Z
     22a:	91 50       	subi	r25, 0x01	; 1
     22c:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     22e:	3f bf       	out	0x3f, r19	; 63
			}
			
			return Data;
		}
     230:	82 2f       	mov	r24, r18
     232:	08 95       	ret

00000234 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     238:	84 b7       	in	r24, 0x34	; 52
     23a:	87 7f       	andi	r24, 0xF7	; 247
     23c:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	a8 95       	wdr
     244:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     248:	88 61       	ori	r24, 0x18	; 24
     24a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     24e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     252:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	80 e8       	ldi	r24, 0x80	; 128
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     260:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     264:	0f be       	out	0x3f, r0	; 63
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	
	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	85 bd       	out	0x25, r24	; 37
	
	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
     26a:	5f 9a       	sbi	0x0b, 7	; 11
	AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
     26c:	57 9a       	sbi	0x0a, 7	; 10

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     26e:	e9 ec       	ldi	r30, 0xC9	; 201
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	10 82       	st	Z, r1
	UCSR1A = 0;
     274:	a8 ec       	ldi	r26, 0xC8	; 200
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	1c 92       	st	X, r1
	UCSR1C = 0;
     27a:	ca ec       	ldi	r28, 0xCA	; 202
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	18 82       	st	Y, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = SERIAL_2X_UBBRVAL(9600);
     280:	8f ec       	ldi	r24, 0xCF	; 207
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7fc0cd>
     288:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7fc0cc>

	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     28c:	86 e0       	ldi	r24, 0x06	; 6
     28e:	88 83       	st	Y, r24
	UCSR1A = (1 << U2X1);
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	8c 93       	st	X, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     294:	88 e9       	ldi	r24, 0x98	; 152
     296:	80 83       	st	Z, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     298:	8a b1       	in	r24, 0x0a	; 10
     29a:	80 63       	ori	r24, 0x30	; 48
     29c:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
     29e:	8b b1       	in	r24, 0x0b	; 11
     2a0:	80 63       	ori	r24, 0x30	; 48
     2a2:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
	UCSR1A = (1 << U2X1);
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     2a8:	c0 c3       	rjmp	.+1920   	; 0xa2a <USB_Init>

000002aa <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2aa:	c4 df       	rcall	.-120    	; 0x234 <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     2ac:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2ae:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     2b0:	86 e3       	ldi	r24, 0x36	; 54
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <Keyboard_Buffer+0x81>
     2b8:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Keyboard_Buffer+0x80>
				Buffer->Out = Buffer->Buffer;
     2bc:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <Keyboard_Buffer+0x83>
     2c0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <Keyboard_Buffer+0x82>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2c4:	2f bf       	out	0x3f, r18	; 63
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     2c6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2c8:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     2ca:	8e eb       	ldi	r24, 0xBE	; 190
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <Mouse_Buffer+0x81>
     2d2:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <Mouse_Buffer+0x80>
				Buffer->Out = Buffer->Buffer;
     2d6:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <Mouse_Buffer+0x83>
     2da:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <Mouse_Buffer+0x82>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2de:	2f bf       	out	0x3f, r18	; 63

	RingBuffer_InitBuffer(&Keyboard_Buffer);
	RingBuffer_InitBuffer(&Mouse_Buffer);

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2e0:	80 e2       	ldi	r24, 0x20	; 32
     2e2:	67 df       	rcall	.-306    	; 0x1b2 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2e4:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     2e6:	80 e1       	ldi	r24, 0x10	; 16
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	14 d7       	rcall	.+3624   	; 0x1114 <HID_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	11 d7       	rcall	.+3618   	; 0x1114 <HID_Device_USBTask>
		USB_USBTask();
     2f2:	b0 d5       	rcall	.+2912   	; 0xe54 <USB_USBTask>
     2f4:	f8 cf       	rjmp	.-16     	; 0x2e6 <main+0x3c>

000002f6 <EVENT_USB_Device_Connect>:
     2f6:	80 e1       	ldi	r24, 0x10	; 16
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2f8:	5c cf       	rjmp	.-328    	; 0x1b2 <LEDs_SetAllLEDs>

000002fa <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2fa:	80 e2       	ldi	r24, 0x20	; 32
     2fc:	5a cf       	rjmp	.-332    	; 0x1b2 <LEDs_SetAllLEDs>

000002fe <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     2fe:	cf 93       	push	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     300:	80 e1       	ldi	r24, 0x10	; 16
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	f4 d6       	rcall	.+3560   	; 0x10ee <HID_Device_ConfigureEndpoints>
     306:	c8 2f       	mov	r28, r24
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	f0 d6       	rcall	.+3552   	; 0x10ee <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     30e:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     312:	94 60       	ori	r25, 0x04	; 4
     314:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     318:	cc 23       	and	r28, r28
     31a:	11 f0       	breq	.+4      	; 0x320 <__stack+0x21>
     31c:	81 11       	cpse	r24, r1
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__stack+0x25>
     320:	80 e2       	ldi	r24, 0x20	; 32
     322:	01 c0       	rjmp	.+2      	; 0x326 <__stack+0x27>
}
     324:	80 e1       	ldi	r24, 0x10	; 16
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     326:	cf 91       	pop	r28
     328:	44 cf       	rjmp	.-376    	; 0x1b2 <LEDs_SetAllLEDs>

0000032a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	ac d5       	rcall	.+2904   	; 0xe88 <HID_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	a9 c5       	rjmp	.+2898   	; 0xe88 <HID_Device_ProcessControlRequest>

00000336 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1)
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     336:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Keyboard_HID_Interface+0xe>
     33a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Keyboard_HID_Interface+0xf>
     33e:	00 97       	sbiw	r24, 0x00	; 0
     340:	29 f0       	breq	.+10     	; 0x34c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Keyboard_HID_Interface+0xf>
     348:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Keyboard_HID_Interface+0xe>
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1)
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     34c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     350:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	29 f0       	breq	.+10     	; 0x362 <EVENT_USB_Device_StartOfFrame+0x2c>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     35e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     362:	08 95       	ret

00000364 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	00 d0       	rcall	.+0      	; 0x37a <CALLBACK_HID_Device_CreateHIDReport+0x16>
     37a:	1f 92       	push	r1
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	79 01       	movw	r14, r18
	if(HIDInterfaceInfo->Config.InterfaceNumber == Mouse_HID_Interface.Config.InterfaceNumber) {
     382:	fc 01       	movw	r30, r24
     384:	90 81       	ld	r25, Z
     386:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     38a:	98 13       	cpse	r25, r24
     38c:	2c c0       	rjmp	.+88     	; 0x3e6 <CALLBACK_HID_Device_CreateHIDReport+0x82>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     38e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     390:	f8 94       	cli
			{
				Count = Buffer->Count;
     392:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <Mouse_Buffer+0x84>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     396:	9f bf       	out	0x3f, r25	; 63
		
	    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&Mouse_Buffer);

	    if (BufferCount >= MOUSE_COMMAND_SIZE) {
     398:	84 30       	cpi	r24, 0x04	; 4
     39a:	c0 f0       	brcs	.+48     	; 0x3cc <CALLBACK_HID_Device_CreateHIDReport+0x68>
			
			int ind;
			USB_MouseReport_Data_t newMouseReport;
			for (ind=0; ind<3; ind++) {
		    	((uint8_t *)&newMouseReport)[ind] = RingBuffer_Remove(&Mouse_Buffer);
     39c:	8e eb       	ldi	r24, 0xBE	; 190
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	2c df       	rcall	.-424    	; 0x1fa <RingBuffer_Remove>
     3a2:	89 83       	std	Y+1, r24	; 0x01
     3a4:	8e eb       	ldi	r24, 0xBE	; 190
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	28 df       	rcall	.-432    	; 0x1fa <RingBuffer_Remove>
     3aa:	8a 83       	std	Y+2, r24	; 0x02
     3ac:	8e eb       	ldi	r24, 0xBE	; 190
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	24 df       	rcall	.-440    	; 0x1fa <RingBuffer_Remove>
     3b2:	8b 83       	std	Y+3, r24	; 0x03
			}

			RingBuffer_Remove(&Mouse_Buffer);	// unused wheel for now
     3b4:	8e eb       	ldi	r24, 0xBE	; 190
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	20 df       	rcall	.-448    	; 0x1fa <RingBuffer_Remove>
     3ba:	89 81       	ldd	r24, Y+1	; 0x01

			mouseReport.Button = newMouseReport.Button;
     3bc:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <mouseReport>
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
			mouseReport.X = newMouseReport.X;
     3c2:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <mouseReport+0x1>
     3c6:	8b 81       	ldd	r24, Y+3	; 0x03
			mouseReport.Y = newMouseReport.Y;
     3c8:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <mouseReport+0x2>
     3cc:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <mouseReport>
	    }
		USB_MouseReport_Data_t* reportp = (USB_MouseReport_Data_t*)ReportData;

		*reportp = mouseReport;
     3d0:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <mouseReport+0x1>
     3d4:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <mouseReport+0x2>
     3d8:	f7 01       	movw	r30, r14
     3da:	80 83       	st	Z, r24
     3dc:	91 83       	std	Z+1, r25	; 0x01
     3de:	a2 83       	std	Z+2, r26	; 0x02
     3e0:	83 e0       	ldi	r24, 0x03	; 3

		*ReportSize = sizeof(USB_MouseReport_Data_t);
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	25 c0       	rjmp	.+74     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3e6:	9f b7       	in	r25, 0x3f	; 63
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3e8:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ea:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <Keyboard_Buffer+0x84>
			{
				Count = Buffer->Count;
     3ee:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f0:	88 30       	cpi	r24, 0x08	; 8
	uint8_t *datap = ReportData;
	int ind;

	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&Keyboard_Buffer);

	if (BufferCount >= 8) {
     3f2:	20 f4       	brcc	.+8      	; 0x3fc <CALLBACK_HID_Device_CreateHIDReport+0x98>
     3f4:	a3 e2       	ldi	r26, 0x23	; 35
     3f6:	b1 e0       	ldi	r27, 0x01	; 1
     3f8:	f7 01       	movw	r30, r14
     3fa:	12 c0       	rjmp	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3fc:	83 e2       	ldi	r24, 0x23	; 35
     3fe:	c8 2e       	mov	r12, r24
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	d8 2e       	mov	r13, r24
     404:	9b e2       	ldi	r25, 0x2B	; 43
     406:	a9 2e       	mov	r10, r25
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	b9 2e       	mov	r11, r25
	    for (ind=0; ind<8; ind++) {
		keyboardData[ind] = RingBuffer_Remove(&Keyboard_Buffer);
     40c:	86 e3       	ldi	r24, 0x36	; 54
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	f4 de       	rcall	.-536    	; 0x1fa <RingBuffer_Remove>
     412:	f6 01       	movw	r30, r12
     414:	81 93       	st	Z+, r24
     416:	6f 01       	movw	r12, r30
     418:	ae 16       	cp	r10, r30
	int ind;

	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&Keyboard_Buffer);

	if (BufferCount >= 8) {
	    for (ind=0; ind<8; ind++) {
     41a:	bf 06       	cpc	r11, r31
     41c:	b9 f7       	brne	.-18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     41e:	ea cf       	rjmp	.-44     	; 0x3f4 <CALLBACK_HID_Device_CreateHIDReport+0x90>
     420:	8d 91       	ld	r24, X+
		keyboardData[ind] = RingBuffer_Remove(&Keyboard_Buffer);
	    }
	}

	for (ind=0; ind<8; ind++) {
	    datap[ind] = keyboardData[ind];
     422:	81 93       	st	Z+, r24
     424:	81 e0       	ldi	r24, 0x01	; 1
	    for (ind=0; ind<8; ind++) {
		keyboardData[ind] = RingBuffer_Remove(&Keyboard_Buffer);
	    }
	}

	for (ind=0; ind<8; ind++) {
     426:	ab 32       	cpi	r26, 0x2B	; 43
     428:	b8 07       	cpc	r27, r24
     42a:	d1 f7       	brne	.-12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     42c:	88 e0       	ldi	r24, 0x08	; 8
	    datap[ind] = keyboardData[ind];
	}

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	f8 01       	movw	r30, r16
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	df 90       	pop	r13
     44c:	cf 90       	pop	r12
     44e:	bf 90       	pop	r11
     450:	af 90       	pop	r10
     452:	08 95       	ret

00000454 <CALLBACK_HID_Device_ProcessHIDReport>:
     454:	80 51       	subi	r24, 0x10	; 16
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     456:	91 40       	sbci	r25, 0x01	; 1
     458:	41 f4       	brne	.+16     	; 0x46a <CALLBACK_HID_Device_ProcessHIDReport+0x16>
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
		uint8_t* LEDReport = (uint8_t*)ReportData;

		if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     45a:	f9 01       	movw	r30, r18
     45c:	80 81       	ld	r24, Z
     45e:	80 ff       	sbrs	r24, 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <CALLBACK_HID_Device_ProcessHIDReport+0x12>
		  LEDMask |= LEDS_LED1;
     462:	80 e2       	ldi	r24, 0x20	; 32
     464:	01 c0       	rjmp	.+2      	; 0x468 <CALLBACK_HID_Device_ProcessHIDReport+0x14>
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
     466:	80 e0       	ldi	r24, 0x00	; 0
		  LEDMask |= LEDS_LED3;

		if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
		  LEDMask |= LEDS_LED4;

		LEDs_SetAllLEDs(LEDMask);
     468:	a4 ce       	rjmp	.-696    	; 0x1b2 <LEDs_SetAllLEDs>
     46a:	08 95       	ret

0000046c <__vector_23>:
}

int8_t CurrentCommand = 0;
int8_t CommandBuffered = 0;
ISR(USART1_RX_vect, ISR_BLOCK)
{
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	2f 93       	push	r18
     478:	3f 93       	push	r19
     47a:	4f 93       	push	r20
     47c:	5f 93       	push	r21
     47e:	6f 93       	push	r22
     480:	7f 93       	push	r23
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	af 93       	push	r26
     488:	bf 93       	push	r27
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     48e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7fc0ce>

	if (USB_DeviceState == DEVICE_STATE_Configured){
     492:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	11 f5       	brne	.+68     	; 0x4de <__vector_23+0x72>
		if(CurrentCommand == COMMAND_KEYBOARD){
     49a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <CurrentCommand>
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	79 f4       	brne	.+30     	; 0x4c0 <__vector_23+0x54>
			RingBuffer_Insert(&Keyboard_Buffer, ReceivedByte);
     4a2:	86 e3       	ldi	r24, 0x36	; 54
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	8b de       	rcall	.-746    	; 0x1be <RingBuffer_Insert>
			CommandBuffered++;
     4a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     4ac:	8f 5f       	subi	r24, 0xFF	; 255
     4ae:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			if(CommandBuffered >= KEYBOARD_COMMAND_SIZE){
     4b2:	88 30       	cpi	r24, 0x08	; 8
     4b4:	a4 f0       	brlt	.+40     	; 0x4de <__vector_23+0x72>
				CurrentCommand = 0;
     4b6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <CurrentCommand>
				CommandBuffered = 0;
     4ba:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     4be:	0f c0       	rjmp	.+30     	; 0x4de <__vector_23+0x72>
			}
		}
		else if(CurrentCommand == COMMAND_MOUSE){
     4c0:	82 30       	cpi	r24, 0x02	; 2
     4c2:	59 f4       	brne	.+22     	; 0x4da <__vector_23+0x6e>
			RingBuffer_Insert(&Mouse_Buffer, ReceivedByte);
     4c4:	8e eb       	ldi	r24, 0xBE	; 190
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	7a de       	rcall	.-780    	; 0x1be <RingBuffer_Insert>
			CommandBuffered++;
     4ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			if(CommandBuffered >= MOUSE_COMMAND_SIZE){
     4d4:	84 30       	cpi	r24, 0x04	; 4
     4d6:	7c f7       	brge	.-34     	; 0x4b6 <__vector_23+0x4a>
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <__vector_23+0x72>
				CurrentCommand = 0;
				CommandBuffered = 0;
			}
		}
		else{
				CurrentCommand = ReceivedByte;
     4da:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <CurrentCommand>
		}
	}
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	7f 91       	pop	r23
     4ec:	6f 91       	pop	r22
     4ee:	5f 91       	pop	r21
     4f0:	4f 91       	pop	r20
     4f2:	3f 91       	pop	r19
     4f4:	2f 91       	pop	r18
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     500:	29 2f       	mov	r18, r25
     502:	33 27       	eor	r19, r19
     504:	23 30       	cpi	r18, 0x03	; 3
     506:	31 05       	cpc	r19, r1
     508:	c9 f0       	breq	.+50     	; 0x53c <CALLBACK_USB_GetDescriptor+0x3c>
     50a:	60 f4       	brcc	.+24     	; 0x524 <CALLBACK_USB_GetDescriptor+0x24>
     50c:	21 30       	cpi	r18, 0x01	; 1
     50e:	31 05       	cpc	r19, r1
     510:	81 f0       	breq	.+32     	; 0x532 <CALLBACK_USB_GetDescriptor+0x32>
     512:	22 30       	cpi	r18, 0x02	; 2
     514:	31 05       	cpc	r19, r1
     516:	09 f0       	breq	.+2      	; 0x51a <CALLBACK_USB_GetDescriptor+0x1a>
     518:	44 c0       	rjmp	.+136    	; 0x5a2 <CALLBACK_USB_GetDescriptor+0xa2>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     51a:	8b e3       	ldi	r24, 0x3B	; 59
     51c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     51e:	28 eb       	ldi	r18, 0xB8	; 184
     520:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     522:	43 c0       	rjmp	.+134    	; 0x5aa <CALLBACK_USB_GetDescriptor+0xaa>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     524:	21 32       	cpi	r18, 0x21	; 33
     526:	31 05       	cpc	r19, r1
     528:	e1 f0       	breq	.+56     	; 0x562 <CALLBACK_USB_GetDescriptor+0x62>
     52a:	22 32       	cpi	r18, 0x22	; 34
     52c:	31 05       	cpc	r19, r1
     52e:	49 f1       	breq	.+82     	; 0x582 <CALLBACK_USB_GetDescriptor+0x82>
     530:	38 c0       	rjmp	.+112    	; 0x5a2 <CALLBACK_USB_GetDescriptor+0xa2>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     532:	82 e1       	ldi	r24, 0x12	; 18
     534:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     536:	23 ef       	ldi	r18, 0xF3	; 243
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	37 c0       	rjmp	.+110    	; 0x5aa <CALLBACK_USB_GetDescriptor+0xaa>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     53c:	99 27       	eor	r25, r25
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	91 05       	cpc	r25, r1
     542:	49 f0       	breq	.+18     	; 0x556 <CALLBACK_USB_GetDescriptor+0x56>
     544:	28 f0       	brcs	.+10     	; 0x550 <CALLBACK_USB_GetDescriptor+0x50>
     546:	02 97       	sbiw	r24, 0x02	; 2
     548:	61 f5       	brne	.+88     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0xa2>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     54a:	e4 e7       	ldi	r30, 0x74	; 116
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	05 c0       	rjmp	.+10     	; 0x55a <CALLBACK_USB_GetDescriptor+0x5a>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     550:	e4 eb       	ldi	r30, 0xB4	; 180
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	02 c0       	rjmp	.+4      	; 0x55a <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     556:	e0 ea       	ldi	r30, 0xA0	; 160
     558:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     55a:	84 91       	lpm	r24, Z
     55c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     55e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     560:	24 c0       	rjmp	.+72     	; 0x5aa <CALLBACK_USB_GetDescriptor+0xaa>
			}

			break;
		case HID_DTYPE_HID:
			switch (wIndex)
     562:	61 15       	cp	r22, r1
     564:	71 05       	cpc	r23, r1
     566:	41 f0       	breq	.+16     	; 0x578 <CALLBACK_USB_GetDescriptor+0x78>
     568:	61 30       	cpi	r22, 0x01	; 1
     56a:	71 05       	cpc	r23, r1
     56c:	d1 f4       	brne	.+52     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0xa2>
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
					break;
				case INTERFACE_ID_Mouse:
					Address = &ConfigurationDescriptor.HID2_MouseHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
     56e:	89 e0       	ldi	r24, 0x09	; 9
     570:	90 e0       	ldi	r25, 0x00	; 0
				case INTERFACE_ID_Keyboard:
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
					break;
				case INTERFACE_ID_Mouse:
					Address = &ConfigurationDescriptor.HID2_MouseHID;
     572:	23 ee       	ldi	r18, 0xE3	; 227
     574:	30 e0       	ldi	r19, 0x00	; 0
					Size    = sizeof(USB_HID_Descriptor_HID_t);
					break;
     576:	19 c0       	rjmp	.+50     	; 0x5aa <CALLBACK_USB_GetDescriptor+0xaa>
		case HID_DTYPE_HID:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
     578:	89 e0       	ldi	r24, 0x09	; 9
     57a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case HID_DTYPE_HID:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
     57c:	2a ec       	ldi	r18, 0xCA	; 202
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	14 c0       	rjmp	.+40     	; 0x5aa <CALLBACK_USB_GetDescriptor+0xaa>
					break;
			}

			break;
		case HID_DTYPE_Report:
			switch (wIndex)
     582:	61 15       	cp	r22, r1
     584:	71 05       	cpc	r23, r1
     586:	41 f0       	breq	.+16     	; 0x598 <CALLBACK_USB_GetDescriptor+0x98>
     588:	61 30       	cpi	r22, 0x01	; 1
     58a:	71 05       	cpc	r23, r1
     58c:	51 f4       	brne	.+20     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0xa2>
					Address = &KeyboardReport;
					Size    = sizeof(KeyboardReport);
					break;
				case INTERFACE_ID_Mouse:
					Address = &MouseReport;
					Size    = sizeof(MouseReport);
     58e:	82 e3       	ldi	r24, 0x32	; 50
     590:	90 e0       	ldi	r25, 0x00	; 0
				case INTERFACE_ID_Keyboard:
					Address = &KeyboardReport;
					Size    = sizeof(KeyboardReport);
					break;
				case INTERFACE_ID_Mouse:
					Address = &MouseReport;
     592:	25 e4       	ldi	r18, 0x45	; 69
     594:	31 e0       	ldi	r19, 0x01	; 1
					Size    = sizeof(MouseReport);
					break;
     596:	09 c0       	rjmp	.+18     	; 0x5aa <CALLBACK_USB_GetDescriptor+0xaa>
		case HID_DTYPE_Report:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &KeyboardReport;
					Size    = sizeof(KeyboardReport);
     598:	80 e4       	ldi	r24, 0x40	; 64
     59a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case HID_DTYPE_Report:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &KeyboardReport;
     59c:	25 e0       	ldi	r18, 0x05	; 5
     59e:	31 e0       	ldi	r19, 0x01	; 1
     5a0:	04 c0       	rjmp	.+8      	; 0x5aa <CALLBACK_USB_GetDescriptor+0xaa>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     5aa:	fa 01       	movw	r30, r20
     5ac:	31 83       	std	Z+1, r19	; 0x01
     5ae:	20 83       	st	Z, r18
	return Size;
}
     5b0:	08 95       	ret

000005b2 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	8b 01       	movw	r16, r22
     5c6:	7a 01       	movw	r14, r20
     5c8:	c4 d1       	rcall	.+904    	; 0x952 <Endpoint_WaitUntilReady>
     5ca:	81 11       	cpse	r24, r1
     5cc:	33 c0       	rjmp	.+102    	; 0x634 <Endpoint_Write_Stream_LE+0x82>
     5ce:	e1 14       	cp	r14, r1
     5d0:	f1 04       	cpc	r15, r1
     5d2:	39 f0       	breq	.+14     	; 0x5e2 <Endpoint_Write_Stream_LE+0x30>
     5d4:	f7 01       	movw	r30, r14
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	08 1b       	sub	r16, r24
     5dc:	19 0b       	sbc	r17, r25
     5de:	c8 0f       	add	r28, r24
     5e0:	d9 1f       	adc	r29, r25
     5e2:	c1 2c       	mov	r12, r1
     5e4:	d1 2c       	mov	r13, r1
     5e6:	01 15       	cp	r16, r1
     5e8:	11 05       	cpc	r17, r1
     5ea:	19 f1       	breq	.+70     	; 0x632 <Endpoint_Write_Stream_LE+0x80>
     5ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5f0:	85 fd       	sbrc	r24, 5
     5f2:	16 c0       	rjmp	.+44     	; 0x620 <Endpoint_Write_Stream_LE+0x6e>
     5f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5f8:	8e 77       	andi	r24, 0x7E	; 126
     5fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5fe:	2a d4       	rcall	.+2132   	; 0xe54 <USB_USBTask>
     600:	e1 14       	cp	r14, r1
     602:	f1 04       	cpc	r15, r1
     604:	49 f0       	breq	.+18     	; 0x618 <Endpoint_Write_Stream_LE+0x66>
     606:	f7 01       	movw	r30, r14
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	c8 0e       	add	r12, r24
     60e:	d9 1e       	adc	r13, r25
     610:	d1 82       	std	Z+1, r13	; 0x01
     612:	c0 82       	st	Z, r12
     614:	85 e0       	ldi	r24, 0x05	; 5
     616:	0e c0       	rjmp	.+28     	; 0x634 <Endpoint_Write_Stream_LE+0x82>
     618:	9c d1       	rcall	.+824    	; 0x952 <Endpoint_WaitUntilReady>
     61a:	88 23       	and	r24, r24
     61c:	21 f3       	breq	.-56     	; 0x5e6 <Endpoint_Write_Stream_LE+0x34>
     61e:	0a c0       	rjmp	.+20     	; 0x634 <Endpoint_Write_Stream_LE+0x82>
     620:	89 91       	ld	r24, Y+
     622:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     626:	01 50       	subi	r16, 0x01	; 1
     628:	11 09       	sbc	r17, r1
     62a:	ff ef       	ldi	r31, 0xFF	; 255
     62c:	cf 1a       	sub	r12, r31
     62e:	df 0a       	sbc	r13, r31
     630:	da cf       	rjmp	.-76     	; 0x5e6 <Endpoint_Write_Stream_LE+0x34>
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	08 95       	ret

00000646 <Endpoint_Write_Control_Stream_LE>:
     646:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <USB_ControlRequest+0x6>
     64a:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <USB_ControlRequest+0x7>
     64e:	26 17       	cp	r18, r22
     650:	37 07       	cpc	r19, r23
     652:	48 f0       	brcs	.+18     	; 0x666 <Endpoint_Write_Control_Stream_LE+0x20>
     654:	61 15       	cp	r22, r1
     656:	71 05       	cpc	r23, r1
     658:	39 f4       	brne	.+14     	; 0x668 <Endpoint_Write_Control_Stream_LE+0x22>
     65a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     65e:	2e 77       	andi	r18, 0x7E	; 126
     660:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     664:	01 c0       	rjmp	.+2      	; 0x668 <Endpoint_Write_Control_Stream_LE+0x22>
     666:	b9 01       	movw	r22, r18
     668:	fc 01       	movw	r30, r24
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	61 15       	cp	r22, r1
     66e:	71 05       	cpc	r23, r1
     670:	61 f1       	breq	.+88     	; 0x6ca <Endpoint_Write_Control_Stream_LE+0x84>
     672:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     676:	88 23       	and	r24, r24
     678:	d9 f1       	breq	.+118    	; 0x6f0 <Endpoint_Write_Control_Stream_LE+0xaa>
     67a:	85 30       	cpi	r24, 0x05	; 5
     67c:	d9 f1       	breq	.+118    	; 0x6f4 <Endpoint_Write_Control_Stream_LE+0xae>
     67e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     682:	83 fd       	sbrc	r24, 3
     684:	39 c0       	rjmp	.+114    	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0xb2>
     686:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     68a:	82 fd       	sbrc	r24, 2
     68c:	2b c0       	rjmp	.+86     	; 0x6e4 <Endpoint_Write_Control_Stream_LE+0x9e>
     68e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     692:	80 ff       	sbrs	r24, 0
     694:	eb cf       	rjmp	.-42     	; 0x66c <Endpoint_Write_Control_Stream_LE+0x26>
     696:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	61 15       	cp	r22, r1
     69e:	71 05       	cpc	r23, r1
     6a0:	51 f0       	breq	.+20     	; 0x6b6 <Endpoint_Write_Control_Stream_LE+0x70>
     6a2:	88 30       	cpi	r24, 0x08	; 8
     6a4:	91 05       	cpc	r25, r1
     6a6:	38 f4       	brcc	.+14     	; 0x6b6 <Endpoint_Write_Control_Stream_LE+0x70>
     6a8:	21 91       	ld	r18, Z+
     6aa:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     6ae:	61 50       	subi	r22, 0x01	; 1
     6b0:	71 09       	sbc	r23, r1
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	f3 cf       	rjmp	.-26     	; 0x69c <Endpoint_Write_Control_Stream_LE+0x56>
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	08 97       	sbiw	r24, 0x08	; 8
     6ba:	09 f0       	breq	.+2      	; 0x6be <Endpoint_Write_Control_Stream_LE+0x78>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6c2:	8e 77       	andi	r24, 0x7E	; 126
     6c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6c8:	d1 cf       	rjmp	.-94     	; 0x66c <Endpoint_Write_Control_Stream_LE+0x26>
     6ca:	21 11       	cpse	r18, r1
     6cc:	d2 cf       	rjmp	.-92     	; 0x672 <Endpoint_Write_Control_Stream_LE+0x2c>
     6ce:	0a c0       	rjmp	.+20     	; 0x6e4 <Endpoint_Write_Control_Stream_LE+0x9e>
     6d0:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     6d4:	88 23       	and	r24, r24
     6d6:	61 f0       	breq	.+24     	; 0x6f0 <Endpoint_Write_Control_Stream_LE+0xaa>
     6d8:	85 30       	cpi	r24, 0x05	; 5
     6da:	61 f0       	breq	.+24     	; 0x6f4 <Endpoint_Write_Control_Stream_LE+0xae>
     6dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6e0:	83 fd       	sbrc	r24, 3
     6e2:	0a c0       	rjmp	.+20     	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0xb2>
     6e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6e8:	82 ff       	sbrs	r24, 2
     6ea:	f2 cf       	rjmp	.-28     	; 0x6d0 <Endpoint_Write_Control_Stream_LE+0x8a>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	08 95       	ret
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	08 95       	ret
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	08 95       	ret
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	08 95       	ret

000006fc <Endpoint_Read_Control_Stream_LE>:
     6fc:	61 15       	cp	r22, r1
     6fe:	71 05       	cpc	r23, r1
     700:	29 f4       	brne	.+10     	; 0x70c <Endpoint_Read_Control_Stream_LE+0x10>
     702:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     706:	2b 77       	andi	r18, 0x7B	; 123
     708:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     70c:	fc 01       	movw	r30, r24
     70e:	61 15       	cp	r22, r1
     710:	71 05       	cpc	r23, r1
     712:	21 f1       	breq	.+72     	; 0x75c <Endpoint_Read_Control_Stream_LE+0x60>
     714:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     718:	88 23       	and	r24, r24
     71a:	41 f1       	breq	.+80     	; 0x76c <Endpoint_Read_Control_Stream_LE+0x70>
     71c:	85 30       	cpi	r24, 0x05	; 5
     71e:	41 f1       	breq	.+80     	; 0x770 <Endpoint_Read_Control_Stream_LE+0x74>
     720:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     724:	83 fd       	sbrc	r24, 3
     726:	20 c0       	rjmp	.+64     	; 0x768 <Endpoint_Read_Control_Stream_LE+0x6c>
     728:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     72c:	82 ff       	sbrs	r24, 2
     72e:	ef cf       	rjmp	.-34     	; 0x70e <Endpoint_Read_Control_Stream_LE+0x12>
     730:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     734:	88 23       	and	r24, r24
     736:	31 f0       	breq	.+12     	; 0x744 <Endpoint_Read_Control_Stream_LE+0x48>
     738:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     73c:	81 93       	st	Z+, r24
     73e:	61 50       	subi	r22, 0x01	; 1
     740:	71 09       	sbc	r23, r1
     742:	b1 f7       	brne	.-20     	; 0x730 <Endpoint_Read_Control_Stream_LE+0x34>
     744:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     748:	8b 77       	andi	r24, 0x7B	; 123
     74a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     74e:	df cf       	rjmp	.-66     	; 0x70e <Endpoint_Read_Control_Stream_LE+0x12>
     750:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     754:	88 23       	and	r24, r24
     756:	51 f0       	breq	.+20     	; 0x76c <Endpoint_Read_Control_Stream_LE+0x70>
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	51 f0       	breq	.+20     	; 0x770 <Endpoint_Read_Control_Stream_LE+0x74>
     75c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     760:	80 ff       	sbrs	r24, 0
     762:	f6 cf       	rjmp	.-20     	; 0x750 <Endpoint_Read_Control_Stream_LE+0x54>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	08 95       	ret
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	08 95       	ret
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	08 95       	ret
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	08 95       	ret

00000774 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     774:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <USB_ControlRequest+0x6>
     778:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <USB_ControlRequest+0x7>
     77c:	26 17       	cp	r18, r22
     77e:	37 07       	cpc	r19, r23
     780:	48 f0       	brcs	.+18     	; 0x794 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     782:	61 15       	cp	r22, r1
     784:	71 05       	cpc	r23, r1
     786:	39 f4       	brne	.+14     	; 0x796 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     788:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     78c:	2e 77       	andi	r18, 0x7E	; 126
     78e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     792:	01 c0       	rjmp	.+2      	; 0x796 <Endpoint_Write_Control_PStream_LE+0x22>
     794:	b9 01       	movw	r22, r18
     796:	fc 01       	movw	r30, r24
     798:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     79a:	61 15       	cp	r22, r1
     79c:	71 05       	cpc	r23, r1
     79e:	79 f1       	breq	.+94     	; 0x7fe <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7a0:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7a4:	88 23       	and	r24, r24
     7a6:	09 f4       	brne	.+2      	; 0x7aa <Endpoint_Write_Control_PStream_LE+0x36>
     7a8:	3d c0       	rjmp	.+122    	; 0x824 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7aa:	85 30       	cpi	r24, 0x05	; 5
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <Endpoint_Write_Control_PStream_LE+0x3c>
     7ae:	3c c0       	rjmp	.+120    	; 0x828 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7b4:	83 fd       	sbrc	r24, 3
     7b6:	3a c0       	rjmp	.+116    	; 0x82c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7bc:	82 fd       	sbrc	r24, 2
     7be:	2c c0       	rjmp	.+88     	; 0x818 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
     7c4:	80 ff       	sbrs	r24, 0
     7c6:	e9 cf       	rjmp	.-46     	; 0x79a <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     7c8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     7cc:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7ce:	61 15       	cp	r22, r1
     7d0:	71 05       	cpc	r23, r1
     7d2:	59 f0       	breq	.+22     	; 0x7ea <Endpoint_Write_Control_PStream_LE+0x76>
     7d4:	88 30       	cpi	r24, 0x08	; 8
     7d6:	91 05       	cpc	r25, r1
     7d8:	40 f4       	brcc	.+16     	; 0x7ea <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7da:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7dc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     7e0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     7e2:	61 50       	subi	r22, 0x01	; 1
     7e4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	f2 cf       	rjmp	.-28     	; 0x7ce <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	08 97       	sbiw	r24, 0x08	; 8
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <Endpoint_Write_Control_PStream_LE+0x7e>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     7f6:	8e 77       	andi	r24, 0x7E	; 126
     7f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     7fc:	ce cf       	rjmp	.-100    	; 0x79a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7fe:	21 11       	cpse	r18, r1
     800:	cf cf       	rjmp	.-98     	; 0x7a0 <Endpoint_Write_Control_PStream_LE+0x2c>
     802:	0a c0       	rjmp	.+20     	; 0x818 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     804:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     808:	88 23       	and	r24, r24
     80a:	61 f0       	breq	.+24     	; 0x824 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     80c:	85 30       	cpi	r24, 0x05	; 5
     80e:	61 f0       	breq	.+24     	; 0x828 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     810:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     814:	83 fd       	sbrc	r24, 3
     816:	0a c0       	rjmp	.+20     	; 0x82c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     818:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     81c:	82 ff       	sbrs	r24, 2
     81e:	f2 cf       	rjmp	.-28     	; 0x804 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     82c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     82e:	08 95       	ret

00000830 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     830:	98 2f       	mov	r25, r24
     832:	95 30       	cpi	r25, 0x05	; 5
     834:	68 f5       	brcc	.+90     	; 0x890 <Endpoint_ConfigureEndpoint_Prv+0x60>
     836:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     83a:	98 17       	cp	r25, r24
     83c:	39 f0       	breq	.+14     	; 0x84c <Endpoint_ConfigureEndpoint_Prv+0x1c>
     83e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     842:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     846:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     84a:	03 c0       	rjmp	.+6      	; 0x852 <Endpoint_ConfigureEndpoint_Prv+0x22>
     84c:	24 2f       	mov	r18, r20
     84e:	76 2f       	mov	r23, r22
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	21 fd       	sbrc	r18, 1
     854:	02 c0       	rjmp	.+4      	; 0x85a <Endpoint_ConfigureEndpoint_Prv+0x2a>
     856:	9f 5f       	subi	r25, 0xFF	; 255
     858:	ec cf       	rjmp	.-40     	; 0x832 <Endpoint_ConfigureEndpoint_Prv+0x2>
     85a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     85e:	3e 7f       	andi	r19, 0xFE	; 254
     860:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     864:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     868:	3d 7f       	andi	r19, 0xFD	; 253
     86a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     86e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     872:	31 60       	ori	r19, 0x01	; 1
     874:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     878:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     87c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     880:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     884:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     888:	27 fd       	sbrc	r18, 7
     88a:	e5 cf       	rjmp	.-54     	; 0x856 <Endpoint_ConfigureEndpoint_Prv+0x26>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	08 95       	ret
     890:	8f 70       	andi	r24, 0x0F	; 15
     892:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	08 95       	ret

0000089a <Endpoint_ConfigureEndpointTable>:
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	06 2f       	mov	r16, r22
     8a4:	ec 01       	movw	r28, r24
     8a6:	10 e0       	ldi	r17, 0x00	; 0
     8a8:	10 17       	cp	r17, r16
     8aa:	71 f1       	breq	.+92     	; 0x908 <Endpoint_ConfigureEndpointTable+0x6e>
     8ac:	98 81       	ld	r25, Y
     8ae:	91 11       	cpse	r25, r1
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <Endpoint_ConfigureEndpointTable+0x1e>
     8b2:	1f 5f       	subi	r17, 0xFF	; 255
     8b4:	25 96       	adiw	r28, 0x05	; 5
     8b6:	f8 cf       	rjmp	.-16     	; 0x8a8 <Endpoint_ConfigureEndpointTable+0xe>
     8b8:	2c 81       	ldd	r18, Y+4	; 0x04
     8ba:	a9 81       	ldd	r26, Y+1	; 0x01
     8bc:	ba 81       	ldd	r27, Y+2	; 0x02
     8be:	6b 81       	ldd	r22, Y+3	; 0x03
     8c0:	89 2f       	mov	r24, r25
     8c2:	8f 70       	andi	r24, 0x0F	; 15
     8c4:	85 30       	cpi	r24, 0x05	; 5
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <Endpoint_ConfigureEndpointTable+0x32>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	1f c0       	rjmp	.+62     	; 0x90a <Endpoint_ConfigureEndpointTable+0x70>
     8cc:	22 30       	cpi	r18, 0x02	; 2
     8ce:	10 f4       	brcc	.+4      	; 0x8d4 <Endpoint_ConfigureEndpointTable+0x3a>
     8d0:	42 e0       	ldi	r20, 0x02	; 2
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <Endpoint_ConfigureEndpointTable+0x3c>
     8d4:	46 e0       	ldi	r20, 0x06	; 6
     8d6:	e8 e0       	ldi	r30, 0x08	; 8
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	ea 17       	cp	r30, r26
     8de:	fb 07       	cpc	r31, r27
     8e0:	20 f4       	brcc	.+8      	; 0x8ea <Endpoint_ConfigureEndpointTable+0x50>
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	f9 cf       	rjmp	.-14     	; 0x8dc <Endpoint_ConfigureEndpointTable+0x42>
     8ea:	22 95       	swap	r18
     8ec:	20 7f       	andi	r18, 0xF0	; 240
     8ee:	42 2b       	or	r20, r18
     8f0:	62 95       	swap	r22
     8f2:	66 0f       	add	r22, r22
     8f4:	66 0f       	add	r22, r22
     8f6:	60 7c       	andi	r22, 0xC0	; 192
     8f8:	99 1f       	adc	r25, r25
     8fa:	99 27       	eor	r25, r25
     8fc:	99 1f       	adc	r25, r25
     8fe:	69 2b       	or	r22, r25
     900:	97 df       	rcall	.-210    	; 0x830 <Endpoint_ConfigureEndpoint_Prv>
     902:	81 11       	cpse	r24, r1
     904:	d6 cf       	rjmp	.-84     	; 0x8b2 <Endpoint_ConfigureEndpointTable+0x18>
     906:	e0 cf       	rjmp	.-64     	; 0x8c8 <Endpoint_ConfigureEndpointTable+0x2e>
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	08 95       	ret

00000914 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     914:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
     918:	87 ff       	sbrs	r24, 7
     91a:	11 c0       	rjmp	.+34     	; 0x93e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     91c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     920:	82 fd       	sbrc	r24, 2
     922:	05 c0       	rjmp	.+10     	; 0x92e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     924:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     928:	81 11       	cpse	r24, r1
     92a:	f8 cf       	rjmp	.-16     	; 0x91c <Endpoint_ClearStatusStage+0x8>
     92c:	11 c0       	rjmp	.+34     	; 0x950 <Endpoint_ClearStatusStage+0x3c>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     92e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     932:	8b 77       	andi	r24, 0x7B	; 123
     934:	0b c0       	rjmp	.+22     	; 0x94c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     936:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     93a:	88 23       	and	r24, r24
     93c:	49 f0       	breq	.+18     	; 0x950 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     93e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     942:	80 ff       	sbrs	r24, 0
     944:	f8 cf       	rjmp	.-16     	; 0x936 <Endpoint_ClearStatusStage+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     946:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     94a:	8e 77       	andi	r24, 0x7E	; 126
     94c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     950:	08 95       	ret

00000952 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     952:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     956:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     95a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     95c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     960:	84 2f       	mov	r24, r20
     962:	81 70       	andi	r24, 0x01	; 1
     964:	40 ff       	sbrs	r20, 0
     966:	23 c0       	rjmp	.+70     	; 0x9ae <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     968:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     96c:	80 fd       	sbrc	r24, 0
     96e:	1d c0       	rjmp	.+58     	; 0x9aa <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     970:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     974:	88 23       	and	r24, r24
     976:	99 f0       	breq	.+38     	; 0x99e <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     978:	85 30       	cpi	r24, 0x05	; 5
     97a:	99 f0       	breq	.+38     	; 0x9a2 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     97c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     980:	85 fd       	sbrc	r24, 5
     982:	11 c0       	rjmp	.+34     	; 0x9a6 <Endpoint_WaitUntilReady+0x54>
     984:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     988:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     98c:	24 17       	cp	r18, r20
     98e:	35 07       	cpc	r19, r21
     990:	29 f3       	breq	.-54     	; 0x95c <Endpoint_WaitUntilReady+0xa>
     992:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     994:	11 f0       	breq	.+4      	; 0x99a <Endpoint_WaitUntilReady+0x48>
     996:	9a 01       	movw	r18, r20
     998:	e1 cf       	rjmp	.-62     	; 0x95c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     99a:	84 e0       	ldi	r24, 0x04	; 4
     99c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     9a2:	83 e0       	ldi	r24, 0x03	; 3
     9a4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9ae:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9b2:	42 ff       	sbrs	r20, 2
     9b4:	dd cf       	rjmp	.-70     	; 0x970 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     9b6:	08 95       	ret

000009b8 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9b8:	41 d0       	rcall	.+130    	; 0xa3c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9ba:	43 d0       	rcall	.+134    	; 0xa42 <USB_INT_ClearAllInterrupts>
     9bc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9c0:	8f 77       	andi	r24, 0x7F	; 127
     9c2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     9c6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
     9ca:	80 68       	ori	r24, 0x80	; 128
     9cc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     9d0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9d4:	8f 7d       	andi	r24, 0xDF	; 223
     9d6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     9da:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9dc:	89 bd       	out	0x29, r24	; 41
     9de:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9e0:	89 bd       	out	0x29, r24	; 41
     9e2:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9e4:	00 fe       	sbrs	r0, 0
     9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <USB_ResetInterface+0x2a>
     9e8:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     9ec:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     9f0:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     9f4:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     9f8:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 df       	rcall	.-464    	; 0x830 <Endpoint_ConfigureEndpoint_Prv>
     a00:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a04:	8e 7f       	andi	r24, 0xFE	; 254
     a06:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     a0a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a14:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a18:	88 60       	ori	r24, 0x08	; 8
     a1a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a1e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     a28:	08 95       	ret

00000a2a <USB_Init>:
     a2a:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	8e 7f       	andi	r24, 0xFE	; 254
     a32:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <USB_IsInitialized>

	USB_ResetInterface();
     a3a:	be cf       	rjmp	.-132    	; 0x9b8 <USB_ResetInterface>

00000a3c <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a3c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a40:	08 95       	ret

00000a42 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a42:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     a46:	08 95       	ret

00000a48 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     a6a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     a6e:	82 ff       	sbrs	r24, 2
     a70:	0a c0       	rjmp	.+20     	; 0xa86 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     a72:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a76:	82 ff       	sbrs	r24, 2
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     a7a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     a7e:	8b 7f       	andi	r24, 0xFB	; 251
     a80:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     a84:	58 dc       	rcall	.-1872   	; 0x336 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     a86:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     a8a:	80 ff       	sbrs	r24, 0
     a8c:	17 c0       	rjmp	.+46     	; 0xabc <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     a8e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a92:	80 ff       	sbrs	r24, 0
     a94:	13 c0       	rjmp	.+38     	; 0xabc <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a96:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     aa0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     aa4:	80 61       	ori	r24, 0x10	; 16
     aa6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     aaa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     aae:	80 62       	ori	r24, 0x20	; 32
     ab0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ab4:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     ab6:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     aba:	1f dc       	rcall	.-1986   	; 0x2fa <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     abc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     ac0:	84 ff       	sbrs	r24, 4
     ac2:	2f c0       	rjmp	.+94     	; 0xb22 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ac4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     ac8:	84 ff       	sbrs	r24, 4
     aca:	2b c0       	rjmp	.+86     	; 0xb22 <__vector_11+0xda>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     acc:	84 e0       	ldi	r24, 0x04	; 4
     ace:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ad0:	86 e0       	ldi	r24, 0x06	; 6
     ad2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ad4:	09 b4       	in	r0, 0x29	; 41
     ad6:	00 fe       	sbrs	r0, 0
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <__vector_11+0x8c>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ada:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     ade:	8f 7d       	andi	r24, 0xDF	; 223
     ae0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     ae4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     ae8:	8f 7e       	andi	r24, 0xEF	; 239
     aea:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     aee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     af2:	8f 7e       	andi	r24, 0xEF	; 239
     af4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     af8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b02:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <USB_Device_ConfigurationNumber>
     b06:	88 23       	and	r24, r24
     b08:	11 f0       	breq	.+4      	; 0xb0e <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	07 c0       	rjmp	.+14     	; 0xb1c <__vector_11+0xd4>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b0e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     b12:	87 fd       	sbrc	r24, 7
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <__vector_11+0xd2>
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <__vector_11+0xd4>
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     b20:	ea db       	rcall	.-2092   	; 0x2f6 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b22:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b26:	83 ff       	sbrs	r24, 3
     b28:	22 c0       	rjmp	.+68     	; 0xb6e <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     b2a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b2e:	83 ff       	sbrs	r24, 3
     b30:	1e c0       	rjmp	.+60     	; 0xb6e <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     b32:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     b36:	87 7f       	andi	r24, 0xF7	; 247
     b38:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     b42:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b46:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b50:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b54:	8e 7f       	andi	r24, 0xFE	; 254
     b56:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b5a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b5e:	80 61       	ori	r24, 0x10	; 16
     b60:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b64:	42 e0       	ldi	r20, 0x02	; 2
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     b6a:	62 de       	rcall	.-828    	; 0x830 <Endpoint_ConfigureEndpoint_Prv>
     b6c:	72 d1       	rcall	.+740    	; 0xe52 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
     b72:	bf 91       	pop	r27
     b74:	af 91       	pop	r26
     b76:	9f 91       	pop	r25
     b78:	8f 91       	pop	r24
     b7a:	7f 91       	pop	r23
     b7c:	6f 91       	pop	r22
     b7e:	5f 91       	pop	r21
     b80:	4f 91       	pop	r20
     b82:	3f 91       	pop	r19
     b84:	2f 91       	pop	r18
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	aa 97       	sbiw	r28, 0x2a	; 42
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	e8 e4       	ldi	r30, 0x48	; 72
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     baa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     bae:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     bb0:	22 e0       	ldi	r18, 0x02	; 2
     bb2:	e0 35       	cpi	r30, 0x50	; 80
     bb4:	f2 07       	cpc	r31, r18
     bb6:	c9 f7       	brne	.-14     	; 0xbaa <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bb8:	b8 db       	rcall	.-2192   	; 0x32a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
     bbe:	83 ff       	sbrs	r24, 3
     bc0:	30 c1       	rjmp	.+608    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bc2:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     bc6:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <USB_ControlRequest+0x1>
     bca:	95 30       	cpi	r25, 0x05	; 5
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <USB_Device_ProcessControlRequest+0x40>
     bce:	83 c0       	rjmp	.+262    	; 0xcd6 <USB_Device_ProcessControlRequest+0x146>
     bd0:	30 f4       	brcc	.+12     	; 0xbde <USB_Device_ProcessControlRequest+0x4e>
     bd2:	91 30       	cpi	r25, 0x01	; 1
     bd4:	a9 f1       	breq	.+106    	; 0xc40 <USB_Device_ProcessControlRequest+0xb0>
     bd6:	68 f0       	brcs	.+26     	; 0xbf2 <USB_Device_ProcessControlRequest+0x62>
     bd8:	93 30       	cpi	r25, 0x03	; 3
     bda:	91 f1       	breq	.+100    	; 0xc40 <USB_Device_ProcessControlRequest+0xb0>
     bdc:	22 c1       	rjmp	.+580    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
     bde:	98 30       	cpi	r25, 0x08	; 8
     be0:	09 f4       	brne	.+2      	; 0xbe4 <USB_Device_ProcessControlRequest+0x54>
     be2:	ef c0       	rjmp	.+478    	; 0xdc2 <USB_Device_ProcessControlRequest+0x232>
     be4:	99 30       	cpi	r25, 0x09	; 9
     be6:	09 f4       	brne	.+2      	; 0xbea <USB_Device_ProcessControlRequest+0x5a>
     be8:	fb c0       	rjmp	.+502    	; 0xde0 <USB_Device_ProcessControlRequest+0x250>
     bea:	96 30       	cpi	r25, 0x06	; 6
     bec:	09 f0       	breq	.+2      	; 0xbf0 <USB_Device_ProcessControlRequest+0x60>
     bee:	19 c1       	rjmp	.+562    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
     bf0:	94 c0       	rjmp	.+296    	; 0xd1a <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bf2:	80 38       	cpi	r24, 0x80	; 128
     bf4:	21 f0       	breq	.+8      	; 0xbfe <USB_Device_ProcessControlRequest+0x6e>
     bf6:	82 38       	cpi	r24, 0x82	; 130
     bf8:	09 f0       	breq	.+2      	; 0xbfc <USB_Device_ProcessControlRequest+0x6c>
     bfa:	13 c1       	rjmp	.+550    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
     bfc:	08 c0       	rjmp	.+16     	; 0xc0e <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     bfe:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c02:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <USB_Device_RemoteWakeupEnabled>
     c06:	99 23       	and	r25, r25
     c08:	89 f0       	breq	.+34     	; 0xc2c <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c0a:	82 60       	ori	r24, 0x02	; 2
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c0e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest+0x4>
     c12:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     c14:	85 30       	cpi	r24, 0x05	; 5
     c16:	08 f0       	brcs	.+2      	; 0xc1a <USB_Device_ProcessControlRequest+0x8a>
     c18:	04 c1       	rjmp	.+520    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c1e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     c22:	85 fb       	bst	r24, 5
     c24:	88 27       	eor	r24, r24
     c26:	80 f9       	bld	r24, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c28:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c2c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     c30:	97 7f       	andi	r25, 0xF7	; 247
     c32:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c36:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
     c3a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     c3e:	cc c0       	rjmp	.+408    	; 0xdd8 <USB_Device_ProcessControlRequest+0x248>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c40:	28 2f       	mov	r18, r24
     c42:	2d 7f       	andi	r18, 0xFD	; 253
     c44:	09 f0       	breq	.+2      	; 0xc48 <USB_Device_ProcessControlRequest+0xb8>
     c46:	ed c0       	rjmp	.+474    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c48:	88 23       	and	r24, r24
     c4a:	19 f0       	breq	.+6      	; 0xc52 <USB_Device_ProcessControlRequest+0xc2>
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	61 f0       	breq	.+24     	; 0xc68 <USB_Device_ProcessControlRequest+0xd8>
     c50:	e8 c0       	rjmp	.+464    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c52:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	09 f0       	breq	.+2      	; 0xc5c <USB_Device_ProcessControlRequest+0xcc>
     c5a:	e3 c0       	rjmp	.+454    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c5c:	93 30       	cpi	r25, 0x03	; 3
     c5e:	09 f0       	breq	.+2      	; 0xc62 <USB_Device_ProcessControlRequest+0xd2>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <USB_Device_RemoteWakeupEnabled>
     c66:	2e c0       	rjmp	.+92     	; 0xcc4 <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c68:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     c6c:	81 11       	cpse	r24, r1
     c6e:	2a c0       	rjmp	.+84     	; 0xcc4 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c70:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest+0x4>
     c74:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	28 0f       	add	r18, r24
     c7a:	24 30       	cpi	r18, 0x04	; 4
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <USB_Device_ProcessControlRequest+0xf0>
     c7e:	d1 c0       	rjmp	.+418    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c80:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c84:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c88:	20 ff       	sbrs	r18, 0
     c8a:	1c c0       	rjmp	.+56     	; 0xcc4 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c8c:	93 30       	cpi	r25, 0x03	; 3
     c8e:	21 f4       	brne	.+8      	; 0xc98 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c90:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     c94:	80 62       	ori	r24, 0x20	; 32
     c96:	14 c0       	rjmp	.+40     	; 0xcc0 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c98:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     c9c:	90 61       	ori	r25, 0x10	; 16
     c9e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	a9 01       	movw	r20, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <USB_Device_ProcessControlRequest+0x11e>
     caa:	44 0f       	add	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	8a 95       	dec	r24
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <USB_Device_ProcessControlRequest+0x11a>
     cb2:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
     cb6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cc4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ccc:	87 7f       	andi	r24, 0xF7	; 247
     cce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     cd2:	20 de       	rcall	.-960    	; 0x914 <Endpoint_ClearStatusStage>
     cd4:	a6 c0       	rjmp	.+332    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cd6:	81 11       	cpse	r24, r1
     cd8:	a4 c0       	rjmp	.+328    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     cda:	10 91 4a 02 	lds	r17, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     cde:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     ce0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     ce4:	80 78       	andi	r24, 0x80	; 128
     ce6:	81 2b       	or	r24, r17
     ce8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     cec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     cf0:	87 7f       	andi	r24, 0xF7	; 247
     cf2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     cf6:	0e de       	rcall	.-996    	; 0x914 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
     cfc:	80 ff       	sbrs	r24, 0
     cfe:	fc cf       	rjmp	.-8      	; 0xcf8 <USB_Device_ProcessControlRequest+0x168>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     d00:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d0a:	11 11       	cpse	r17, r1
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <USB_Device_ProcessControlRequest+0x182>
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <USB_Device_ProcessControlRequest+0x184>
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <USB_DeviceState>
     d18:	84 c0       	rjmp	.+264    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d1a:	80 58       	subi	r24, 0x80	; 128
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <USB_Device_ProcessControlRequest+0x192>
     d20:	80 c0       	rjmp	.+256    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d22:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     d26:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
     d2a:	8c 3d       	cpi	r24, 0xDC	; 220
     d2c:	53 e0       	ldi	r21, 0x03	; 3
     d2e:	95 07       	cpc	r25, r21
     d30:	71 f5       	brne	.+92     	; 0xd8e <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d36:	8a e2       	ldi	r24, 0x2A	; 42
     d38:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d3a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d3c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d3e:	de 01       	movw	r26, r28
     d40:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d42:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d44:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d46:	51 e2       	ldi	r21, 0x21	; 33
     d48:	e3 2f       	mov	r30, r19
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
     d50:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     d52:	20 ff       	sbrs	r18, 0
     d54:	03 c0       	rjmp	.+6      	; 0xd5c <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
     d56:	e2 95       	swap	r30
     d58:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     d5a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     d5c:	ef 70       	andi	r30, 0x0F	; 15
     d5e:	8e 2f       	mov	r24, r30
     d60:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d62:	ea 30       	cpi	r30, 0x0A	; 10
     d64:	10 f0       	brcs	.+4      	; 0xd6a <USB_Device_ProcessControlRequest+0x1da>
     d66:	c7 96       	adiw	r24, 0x37	; 55
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <USB_Device_ProcessControlRequest+0x1dc>
     d6a:	c0 96       	adiw	r24, 0x30	; 48
     d6c:	8d 93       	st	X+, r24
     d6e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d70:	2f 5f       	subi	r18, 0xFF	; 255
     d72:	24 31       	cpi	r18, 0x14	; 20
     d74:	49 f7       	brne	.-46     	; 0xd48 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d76:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d7c:	87 7f       	andi	r24, 0xF7	; 247
     d7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d82:	6a e2       	ldi	r22, 0x2A	; 42
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	5d dc       	rcall	.-1862   	; 0x646 <Endpoint_Write_Control_Stream_LE>
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d8e:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <USB_ControlRequest+0x4>
     d92:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <USB_ControlRequest+0x5>
     d96:	ae 01       	movw	r20, r28
     d98:	4f 5f       	subi	r20, 0xFF	; 255
     d9a:	5f 4f       	sbci	r21, 0xFF	; 255
     d9c:	b1 db       	rcall	.-2206   	; 0x500 <CALLBACK_USB_GetDescriptor>
     d9e:	bc 01       	movw	r22, r24
     da0:	89 2b       	or	r24, r25
     da2:	09 f4       	brne	.+2      	; 0xda6 <USB_Device_ProcessControlRequest+0x216>
     da4:	3e c0       	rjmp	.+124    	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
     da6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     daa:	97 7f       	andi	r25, 0xF7	; 247
     dac:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	df dc       	rcall	.-1602   	; 0x774 <Endpoint_Write_Control_PStream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     db6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dba:	8b 77       	andi	r24, 0x7B	; 123
     dbc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dc0:	30 c0       	rjmp	.+96     	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     dc2:	80 38       	cpi	r24, 0x80	; 128
     dc4:	71 f5       	brne	.+92     	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dca:	87 7f       	andi	r24, 0xF7	; 247
     dcc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     dd0:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dd4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ddc:	8e 77       	andi	r24, 0x7E	; 126
     dde:	77 cf       	rjmp	.-274    	; 0xcce <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     de0:	81 11       	cpse	r24, r1
     de2:	1f c0       	rjmp	.+62     	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     de4:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     de8:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
     dec:	99 27       	eor	r25, r25
     dee:	02 97       	sbiw	r24, 0x02	; 2
     df0:	c4 f4       	brge	.+48     	; 0xe22 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     df2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     df6:	87 7f       	andi	r24, 0xF7	; 247
     df8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     dfc:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     e00:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     e04:	87 dd       	rcall	.-1266   	; 0x914 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     e06:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <USB_Device_ConfigurationNumber>
     e0a:	81 11       	cpse	r24, r1
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <USB_Device_ProcessControlRequest+0x28a>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e0e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e12:	87 fd       	sbrc	r24, 7
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <USB_Device_ProcessControlRequest+0x28a>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <USB_Device_ProcessControlRequest+0x28c>
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     e20:	6e da       	rcall	.-2852   	; 0x2fe <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e26:	83 ff       	sbrs	r24, 3
     e28:	0a c0       	rjmp	.+20     	; 0xe3e <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e2e:	87 7f       	andi	r24, 0xF7	; 247
     e30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e34:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     e38:	80 62       	ori	r24, 0x20	; 32
     e3a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e3e:	aa 96       	adiw	r28, 0x2a	; 42
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	08 95       	ret

00000e52 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     e52:	08 95       	ret

00000e54 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e54:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e56:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     e5a:	88 23       	and	r24, r24
     e5c:	99 f0       	breq	.+38     	; 0xe84 <USB_USBTask+0x30>
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e5e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     e62:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e64:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     e68:	89 2f       	mov	r24, r25
     e6a:	81 70       	andi	r24, 0x01	; 1
     e6c:	90 fd       	sbrc	r25, 0
     e6e:	80 e8       	ldi	r24, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e70:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e72:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e7a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     e7c:	89 de       	rcall	.-750    	; 0xb90 <USB_Device_ProcessControlRequest>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e7e:	cf 70       	andi	r28, 0x0F	; 15
     e80:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e88:	6f 92       	push	r6
     e8a:	7f 92       	push	r7
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <HID_Device_ProcessControlRequest+0x1e>
     ea6:	1f 92       	push	r1
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     eae:	ad b6       	in	r10, 0x3d	; 61
     eb0:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     eb6:	83 ff       	sbrs	r24, 3
     eb8:	03 c1       	rjmp	.+518    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     eba:	f7 01       	movw	r30, r14
     ebc:	80 81       	ld	r24, Z
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <USB_ControlRequest+0x4>
     ec4:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <USB_ControlRequest+0x5>
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	09 f0       	breq	.+2      	; 0xed0 <HID_Device_ProcessControlRequest+0x48>
     ece:	f8 c0       	rjmp	.+496    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
     ed0:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <USB_ControlRequest+0x1>
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	09 f4       	brne	.+2      	; 0xeda <HID_Device_ProcessControlRequest+0x52>
     ed8:	9a c0       	rjmp	.+308    	; 0x100e <HID_Device_ProcessControlRequest+0x186>
     eda:	30 f4       	brcc	.+12     	; 0xee8 <HID_Device_ProcessControlRequest+0x60>
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	71 f0       	breq	.+28     	; 0xefc <HID_Device_ProcessControlRequest+0x74>
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	09 f4       	brne	.+2      	; 0xee6 <HID_Device_ProcessControlRequest+0x5e>
     ee4:	d1 c0       	rjmp	.+418    	; 0x1088 <HID_Device_ProcessControlRequest+0x200>
     ee6:	ec c0       	rjmp	.+472    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
     ee8:	8a 30       	cpi	r24, 0x0A	; 10
     eea:	09 f4       	brne	.+2      	; 0xeee <HID_Device_ProcessControlRequest+0x66>
     eec:	b5 c0       	rjmp	.+362    	; 0x1058 <HID_Device_ProcessControlRequest+0x1d0>
     eee:	8b 30       	cpi	r24, 0x0B	; 11
     ef0:	09 f4       	brne	.+2      	; 0xef4 <HID_Device_ProcessControlRequest+0x6c>
     ef2:	9e c0       	rjmp	.+316    	; 0x1030 <HID_Device_ProcessControlRequest+0x1a8>
     ef4:	89 30       	cpi	r24, 0x09	; 9
     ef6:	09 f0       	breq	.+2      	; 0xefa <HID_Device_ProcessControlRequest+0x72>
     ef8:	e3 c0       	rjmp	.+454    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
     efa:	4c c0       	rjmp	.+152    	; 0xf94 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     efc:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
     f00:	81 3a       	cpi	r24, 0xA1	; 161
     f02:	09 f0       	breq	.+2      	; 0xf06 <HID_Device_ProcessControlRequest+0x7e>
     f04:	dd c0       	rjmp	.+442    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
			{
     f06:	8d b6       	in	r8, 0x3d	; 61
     f08:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
     f0a:	1a 82       	std	Y+2, r1	; 0x02
     f0c:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     f0e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     f12:	10 91 4b 02 	lds	r17, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
     f16:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f18:	f7 01       	movw	r30, r14
     f1a:	80 85       	ldd	r24, Z+8	; 0x08
     f1c:	48 2f       	mov	r20, r24
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	8d b7       	in	r24, 0x3d	; 61
     f22:	9e b7       	in	r25, 0x3e	; 62
     f24:	84 1b       	sub	r24, r20
     f26:	95 0b       	sbc	r25, r21
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	9e bf       	out	0x3e, r25	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	8d bf       	out	0x3d, r24	; 61
     f32:	ed b7       	in	r30, 0x3d	; 61
     f34:	fe b7       	in	r31, 0x3e	; 62
     f36:	31 96       	adiw	r30, 0x01	; 1
     f38:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	cf 01       	movw	r24, r30
     f40:	b8 d1       	rcall	.+880    	; 0x12b2 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     f42:	4f ef       	ldi	r20, 0xFF	; 255
     f44:	41 0f       	add	r20, r17
     f46:	8e 01       	movw	r16, r28
     f48:	0f 5f       	subi	r16, 0xFF	; 255
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	96 01       	movw	r18, r12
     f4e:	be 01       	movw	r22, r28
     f50:	6d 5f       	subi	r22, 0xFD	; 253
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	c7 01       	movw	r24, r14
     f56:	06 da       	rcall	.-3060   	; 0x364 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f58:	f7 01       	movw	r30, r14
     f5a:	86 81       	ldd	r24, Z+6	; 0x06
     f5c:	97 81       	ldd	r25, Z+7	; 0x07
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	21 f0       	breq	.+8      	; 0xf6a <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     f62:	40 85       	ldd	r20, Z+8	; 0x08
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	b6 01       	movw	r22, r12
     f68:	9b d1       	rcall	.+822    	; 0x12a0 <memcpy>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f6a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f7c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     f80:	69 81       	ldd	r22, Y+1	; 0x01
     f82:	7a 81       	ldd	r23, Y+2	; 0x02
     f84:	c6 01       	movw	r24, r12
     f86:	5f db       	rcall	.-2370   	; 0x646 <Endpoint_Write_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f8c:	8b 77       	andi	r24, 0x7B	; 123
     f8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f92:	37 c0       	rjmp	.+110    	; 0x1002 <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f94:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
     f98:	81 32       	cpi	r24, 0x21	; 33
     f9a:	09 f0       	breq	.+2      	; 0xf9e <HID_Device_ProcessControlRequest+0x116>
     f9c:	91 c0       	rjmp	.+290    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
			{
     f9e:	8d b6       	in	r8, 0x3d	; 61
     fa0:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     fa2:	00 91 4e 02 	lds	r16, 0x024E	; 0x80024e <USB_ControlRequest+0x6>
     fa6:	10 91 4f 02 	lds	r17, 0x024F	; 0x80024f <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     faa:	70 90 4a 02 	lds	r7, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     fae:	60 90 4b 02 	lds	r6, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     fb2:	8d b7       	in	r24, 0x3d	; 61
     fb4:	9e b7       	in	r25, 0x3e	; 62
     fb6:	80 1b       	sub	r24, r16
     fb8:	91 0b       	sbc	r25, r17
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	9e bf       	out	0x3e, r25	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	8d bf       	out	0x3d, r24	; 61
     fc4:	ed b7       	in	r30, 0x3d	; 61
     fc6:	fe b7       	in	r31, 0x3e	; 62
     fc8:	31 96       	adiw	r30, 0x01	; 1
     fca:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fcc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     fd6:	b8 01       	movw	r22, r16
     fd8:	cf 01       	movw	r24, r30
     fda:	90 db       	rcall	.-2272   	; 0x6fc <Endpoint_Read_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fdc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     fe0:	8e 77       	andi	r24, 0x7E	; 126
     fe2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	71 10       	cpse	r7, r1
     fea:	01 c0       	rjmp	.+2      	; 0xfee <HID_Device_ProcessControlRequest+0x166>
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	02 1b       	sub	r16, r18
     ff2:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     ff4:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     ff6:	3d 1d       	adc	r19, r13
     ff8:	4f ef       	ldi	r20, 0xFF	; 255
     ffa:	46 0d       	add	r20, r6
     ffc:	67 2d       	mov	r22, r7
     ffe:	c7 01       	movw	r24, r14
    1000:	29 da       	rcall	.-2990   	; 0x454 <CALLBACK_HID_Device_ProcessHIDReport>
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	9e be       	out	0x3e, r9	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	8d be       	out	0x3d, r8	; 61
    100c:	59 c0       	rjmp	.+178    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    100e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
    1012:	81 3a       	cpi	r24, 0xA1	; 161
    1014:	09 f0       	breq	.+2      	; 0x1018 <HID_Device_ProcessControlRequest+0x190>
    1016:	54 c0       	rjmp	.+168    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1018:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    101c:	87 7f       	andi	r24, 0xF7	; 247
    101e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1022:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1026:	80 ff       	sbrs	r24, 0
    1028:	fc cf       	rjmp	.-8      	; 0x1022 <HID_Device_ProcessControlRequest+0x19a>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    102a:	f7 01       	movw	r30, r14
    102c:	81 85       	ldd	r24, Z+9	; 0x09
    102e:	40 c0       	rjmp	.+128    	; 0x10b0 <HID_Device_ProcessControlRequest+0x228>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1030:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
    1034:	81 32       	cpi	r24, 0x21	; 33
    1036:	09 f0       	breq	.+2      	; 0x103a <HID_Device_ProcessControlRequest+0x1b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1038:	43 c0       	rjmp	.+134    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
    103a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    103e:	87 7f       	andi	r24, 0xF7	; 247
    1040:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1044:	67 dc       	rcall	.-1842   	; 0x914 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1046:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	91 11       	cpse	r25, r1
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <HID_Device_ProcessControlRequest+0x1ca>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	f7 01       	movw	r30, r14
    1054:	81 87       	std	Z+9, r24	; 0x09
    1056:	34 c0       	rjmp	.+104    	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1058:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
    105c:	81 32       	cpi	r24, 0x21	; 33
    105e:	81 f5       	brne	.+96     	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
    1060:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1064:	87 7f       	andi	r24, 0xF7	; 247
    1066:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    106a:	54 dc       	rcall	.-1880   	; 0x914 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    106c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
    1070:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
    1074:	88 27       	eor	r24, r24
    1076:	36 e0       	ldi	r19, 0x06	; 6
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	3a 95       	dec	r19
    107e:	e1 f7       	brne	.-8      	; 0x1078 <HID_Device_ProcessControlRequest+0x1f0>
    1080:	f7 01       	movw	r30, r14
    1082:	95 87       	std	Z+13, r25	; 0x0d
    1084:	84 87       	std	Z+12, r24	; 0x0c
    1086:	1c c0       	rjmp	.+56     	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1088:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
    108c:	81 3a       	cpi	r24, 0xA1	; 161
    108e:	c1 f4       	brne	.+48     	; 0x10c0 <HID_Device_ProcessControlRequest+0x238>
    1090:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1094:	87 7f       	andi	r24, 0xF7	; 247
    1096:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    109a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    109e:	80 ff       	sbrs	r24, 0
    10a0:	fc cf       	rjmp	.-8      	; 0x109a <HID_Device_ProcessControlRequest+0x212>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    10a2:	f7 01       	movw	r30, r14
    10a4:	84 85       	ldd	r24, Z+12	; 0x0c
    10a6:	95 85       	ldd	r25, Z+13	; 0x0d
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10ae:	87 95       	ror	r24
    10b0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10b8:	8e 77       	andi	r24, 0x7E	; 126
    10ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10be:	2a dc       	rcall	.-1964   	; 0x914 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	be be       	out	0x3e, r11	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	ad be       	out	0x3d, r10	; 61
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	8f 90       	pop	r8
    10e8:	7f 90       	pop	r7
    10ea:	6f 90       	pop	r6
    10ec:	08 95       	ret

000010ee <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    10ee:	fc 01       	movw	r30, r24
    10f0:	39 96       	adiw	r30, 0x09	; 9
    10f2:	27 e0       	ldi	r18, 0x07	; 7
    10f4:	df 01       	movw	r26, r30
    10f6:	1d 92       	st	X+, r1
    10f8:	2a 95       	dec	r18
    10fa:	e9 f7       	brne	.-6      	; 0x10f6 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	fc 01       	movw	r30, r24
    1100:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1102:	24 ef       	ldi	r18, 0xF4	; 244
    1104:	31 e0       	ldi	r19, 0x01	; 1
    1106:	35 87       	std	Z+13, r19	; 0x0d
    1108:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    110a:	23 e0       	ldi	r18, 0x03	; 3
    110c:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	c3 cb       	rjmp	.-2170   	; 0x89a <Endpoint_ConfigureEndpointTable>

00001114 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1114:	5f 92       	push	r5
    1116:	6f 92       	push	r6
    1118:	7f 92       	push	r7
    111a:	8f 92       	push	r8
    111c:	9f 92       	push	r9
    111e:	af 92       	push	r10
    1120:	bf 92       	push	r11
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	00 d0       	rcall	.+0      	; 0x1134 <HID_Device_USBTask+0x20>
    1134:	1f 92       	push	r1
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    113c:	ad b6       	in	r10, 0x3d	; 61
    113e:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1140:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
    1144:	84 30       	cpi	r24, 0x04	; 4
    1146:	09 f0       	breq	.+2      	; 0x114a <HID_Device_USBTask+0x36>
    1148:	86 c0       	rjmp	.+268    	; 0x1256 <HID_Device_USBTask+0x142>
			 *  \return Current USB frame number from the USB controller.
			 */
			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    114a:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    114e:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1152:	f7 01       	movw	r30, r14
    1154:	22 85       	ldd	r18, Z+10	; 0x0a
    1156:	33 85       	ldd	r19, Z+11	; 0x0b
    1158:	28 17       	cp	r18, r24
    115a:	39 07       	cpc	r19, r25
    115c:	09 f4       	brne	.+2      	; 0x1160 <HID_Device_USBTask+0x4c>
    115e:	7b c0       	rjmp	.+246    	; 0x1256 <HID_Device_USBTask+0x142>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1160:	81 81       	ldd	r24, Z+1	; 0x01
    1162:	8f 70       	andi	r24, 0x0F	; 15
    1164:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *          on its direction.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1168:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    116c:	85 ff       	sbrs	r24, 5
    116e:	73 c0       	rjmp	.+230    	; 0x1256 <HID_Device_USBTask+0x142>
	{
    1170:	8d b6       	in	r8, 0x3d	; 61
    1172:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1174:	40 85       	ldd	r20, Z+8	; 0x08
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	8d b7       	in	r24, 0x3d	; 61
    117a:	9e b7       	in	r25, 0x3e	; 62
    117c:	84 1b       	sub	r24, r20
    117e:	95 0b       	sbc	r25, r21
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	9e bf       	out	0x3e, r25	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	8d bf       	out	0x3d, r24	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1192:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1194:	1a 82       	std	Y+2, r1	; 0x02
    1196:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	cf 01       	movw	r24, r30
    119e:	89 d0       	rcall	.+274    	; 0x12b2 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    11a0:	8e 01       	movw	r16, r28
    11a2:	0f 5f       	subi	r16, 0xFF	; 255
    11a4:	1f 4f       	sbci	r17, 0xFF	; 255
    11a6:	96 01       	movw	r18, r12
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	be 01       	movw	r22, r28
    11ac:	6d 5f       	subi	r22, 0xFD	; 253
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	c7 01       	movw	r24, r14
    11b2:	d8 d8       	rcall	.-3664   	; 0x364 <CALLBACK_HID_Device_CreateHIDReport>
    11b4:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    11b6:	f7 01       	movw	r30, r14
    11b8:	84 85       	ldd	r24, Z+12	; 0x0c
    11ba:	95 85       	ldd	r25, Z+13	; 0x0d
    11bc:	89 2b       	or	r24, r25
    11be:	29 f0       	breq	.+10     	; 0x11ca <HID_Device_USBTask+0xb6>
    11c0:	11 e0       	ldi	r17, 0x01	; 1
    11c2:	86 85       	ldd	r24, Z+14	; 0x0e
    11c4:	97 85       	ldd	r25, Z+15	; 0x0f
    11c6:	89 2b       	or	r24, r25
    11c8:	09 f0       	breq	.+2      	; 0x11cc <HID_Device_USBTask+0xb8>
    11ca:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    11cc:	f7 01       	movw	r30, r14
    11ce:	66 80       	ldd	r6, Z+6	; 0x06
    11d0:	77 80       	ldd	r7, Z+7	; 0x07
    11d2:	61 14       	cp	r6, r1
    11d4:	71 04       	cpc	r7, r1
    11d6:	81 f0       	breq	.+32     	; 0x11f8 <HID_Device_USBTask+0xe4>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    11d8:	49 81       	ldd	r20, Y+1	; 0x01
    11da:	5a 81       	ldd	r21, Y+2	; 0x02
    11dc:	b3 01       	movw	r22, r6
    11de:	c6 01       	movw	r24, r12
    11e0:	52 d0       	rcall	.+164    	; 0x1286 <memcmp>
    11e2:	01 e0       	ldi	r16, 0x01	; 1
    11e4:	89 2b       	or	r24, r25
    11e6:	09 f4       	brne	.+2      	; 0x11ea <HID_Device_USBTask+0xd6>
    11e8:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    11ea:	f7 01       	movw	r30, r14
    11ec:	40 85       	ldd	r20, Z+8	; 0x08
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	b6 01       	movw	r22, r12
    11f2:	c3 01       	movw	r24, r6
    11f4:	55 d0       	rcall	.+170    	; 0x12a0 <memcpy>
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <HID_Device_USBTask+0xe6>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    11f8:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	89 2b       	or	r24, r25
    1200:	f1 f0       	breq	.+60     	; 0x123e <HID_Device_USBTask+0x12a>
    1202:	51 10       	cpse	r5, r1
    1204:	04 c0       	rjmp	.+8      	; 0x120e <HID_Device_USBTask+0xfa>
    1206:	01 11       	cpse	r16, r1
    1208:	02 c0       	rjmp	.+4      	; 0x120e <HID_Device_USBTask+0xfa>
    120a:	10 ff       	sbrs	r17, 0
    120c:	18 c0       	rjmp	.+48     	; 0x123e <HID_Device_USBTask+0x12a>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    120e:	f7 01       	movw	r30, r14
    1210:	84 85       	ldd	r24, Z+12	; 0x0c
    1212:	95 85       	ldd	r25, Z+13	; 0x0d
    1214:	97 87       	std	Z+15, r25	; 0x0f
    1216:	86 87       	std	Z+14, r24	; 0x0e
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1218:	81 81       	ldd	r24, Z+1	; 0x01
    121a:	8f 70       	andi	r24, 0x0F	; 15
    121c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1224:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1228:	69 81       	ldd	r22, Y+1	; 0x01
    122a:	7a 81       	ldd	r23, Y+2	; 0x02
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	c6 01       	movw	r24, r12
    1232:	bf d9       	rcall	.-3202   	; 0x5b2 <Endpoint_Write_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1234:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1238:	8e 77       	andi	r24, 0x7E	; 126
    123a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    123e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    1242:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1246:	f7 01       	movw	r30, r14
    1248:	93 87       	std	Z+11, r25	; 0x0b
    124a:	82 87       	std	Z+10, r24	; 0x0a
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	9e be       	out	0x3e, r9	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	8d be       	out	0x3d, r8	; 61
	}
}
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	be be       	out	0x3e, r11	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	ad be       	out	0x3d, r10	; 61
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	cf 90       	pop	r12
    1276:	bf 90       	pop	r11
    1278:	af 90       	pop	r10
    127a:	9f 90       	pop	r9
    127c:	8f 90       	pop	r8
    127e:	7f 90       	pop	r7
    1280:	6f 90       	pop	r6
    1282:	5f 90       	pop	r5
    1284:	08 95       	ret

00001286 <memcmp>:
    1286:	fb 01       	movw	r30, r22
    1288:	dc 01       	movw	r26, r24
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <memcmp+0xe>
    128c:	8d 91       	ld	r24, X+
    128e:	01 90       	ld	r0, Z+
    1290:	80 19       	sub	r24, r0
    1292:	21 f4       	brne	.+8      	; 0x129c <memcmp+0x16>
    1294:	41 50       	subi	r20, 0x01	; 1
    1296:	50 40       	sbci	r21, 0x00	; 0
    1298:	c8 f7       	brcc	.-14     	; 0x128c <memcmp+0x6>
    129a:	88 1b       	sub	r24, r24
    129c:	99 0b       	sbc	r25, r25
    129e:	08 95       	ret

000012a0 <memcpy>:
    12a0:	fb 01       	movw	r30, r22
    12a2:	dc 01       	movw	r26, r24
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <memcpy+0xa>
    12a6:	01 90       	ld	r0, Z+
    12a8:	0d 92       	st	X+, r0
    12aa:	41 50       	subi	r20, 0x01	; 1
    12ac:	50 40       	sbci	r21, 0x00	; 0
    12ae:	d8 f7       	brcc	.-10     	; 0x12a6 <memcpy+0x6>
    12b0:	08 95       	ret

000012b2 <memset>:
    12b2:	dc 01       	movw	r26, r24
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <memset+0x6>
    12b6:	6d 93       	st	X+, r22
    12b8:	41 50       	subi	r20, 0x01	; 1
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	e0 f7       	brcc	.-8      	; 0x12b6 <memset+0x4>
    12be:	08 95       	ret

000012c0 <_exit>:
    12c0:	f8 94       	cli

000012c2 <__stop_program>:
    12c2:	ff cf       	rjmp	.-2      	; 0x12c2 <__stop_program>
