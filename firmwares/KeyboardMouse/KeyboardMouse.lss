
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000012d2  00001366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  00800120  00800120  00001386  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ac7  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019d3  00000000  00000000  0000714f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033d8  00000000  00000000  00008b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000840  00000000  00000000  0000befc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002345  00000000  00000000  0000c73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037af  00000000  00000000  0000ea81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00012230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
       2:	00 00       	nop
       4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__bad_interrupt>
       6:	00 00       	nop
       8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__bad_interrupt>
       e:	00 00       	nop
      10:	cf c0       	rjmp	.+414    	; 0x1b0 <__bad_interrupt>
      12:	00 00       	nop
      14:	cd c0       	rjmp	.+410    	; 0x1b0 <__bad_interrupt>
      16:	00 00       	nop
      18:	cb c0       	rjmp	.+406    	; 0x1b0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c9 c0       	rjmp	.+402    	; 0x1b0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c7 c0       	rjmp	.+398    	; 0x1b0 <__bad_interrupt>
      22:	00 00       	nop
      24:	c5 c0       	rjmp	.+394    	; 0x1b0 <__bad_interrupt>
      26:	00 00       	nop
      28:	c3 c0       	rjmp	.+390    	; 0x1b0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	14 c5       	rjmp	.+2600   	; 0xa56 <__vector_11>
      2e:	00 00       	nop
      30:	bf c0       	rjmp	.+382    	; 0x1b0 <__bad_interrupt>
      32:	00 00       	nop
      34:	bd c0       	rjmp	.+378    	; 0x1b0 <__bad_interrupt>
      36:	00 00       	nop
      38:	bb c0       	rjmp	.+374    	; 0x1b0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b7 c0       	rjmp	.+366    	; 0x1b0 <__bad_interrupt>
      42:	00 00       	nop
      44:	b5 c0       	rjmp	.+362    	; 0x1b0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b3 c0       	rjmp	.+358    	; 0x1b0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b1 c0       	rjmp	.+354    	; 0x1b0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	af c0       	rjmp	.+350    	; 0x1b0 <__bad_interrupt>
      52:	00 00       	nop
      54:	ad c0       	rjmp	.+346    	; 0x1b0 <__bad_interrupt>
      56:	00 00       	nop
      58:	ab c0       	rjmp	.+342    	; 0x1b0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	01 c2       	rjmp	.+1026   	; 0x460 <__vector_23>
      5e:	00 00       	nop
      60:	a7 c0       	rjmp	.+334    	; 0x1b0 <__bad_interrupt>
      62:	00 00       	nop
      64:	a5 c0       	rjmp	.+330    	; 0x1b0 <__bad_interrupt>
      66:	00 00       	nop
      68:	a3 c0       	rjmp	.+326    	; 0x1b0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a1 c0       	rjmp	.+322    	; 0x1b0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9f c0       	rjmp	.+318    	; 0x1b0 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	2a 03 55 00 4e 00 4f 00 2d 00 4b 00 56 00 4d 00     *.U.N.O.-.K.V.M.
      84:	20 00 49 00 6e 00 70 00 75 00 74 00 20 00 44 00      .I.n.p.u.t. .D.
      94:	65 00 76 00 69 00 63 00 65 00 00 00                 e.v.i.c.e...

000000a0 <ManufacturerString>:
      a0:	12 03 53 00 61 00 72 00 64 00 65 00 6c 00 6b 00     ..S.a.r.d.e.l.k.
      b0:	61 00 00 00                                         a...

000000b4 <LanguageString>:
      b4:	04 03 09 04                                         ....

000000b8 <ConfigurationDescriptor>:
      b8:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
      c8:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
      d8:	00 05 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
      e8:	01 22 32 00 07 05 83 03 08 00 05                    ."2........

000000f3 <DeviceDescriptor>:
      f3:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     103:	00 01                                               ..

00000105 <KeyboardReport>:
     105:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     115:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     125:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     135:	26 ff 00 05 07 19 00 29 ff 95 06 75 08 81 00 c0     &......)...u....

00000145 <MouseReport>:
     145:	05 01 09 02 a1 01 09 01 a1 00 95 03 75 01 05 09     ............u...
     155:	19 01 29 03 15 00 25 01 81 02 95 01 75 05 81 01     ..)...%.....u...
     165:	75 08 95 02 05 01 09 30 09 31 15 81 25 7f 81 06     u......0.1..%...
     175:	c0 c0 00                                            ...

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d2 e0       	ldi	r29, 0x02	; 2
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e2 ed       	ldi	r30, 0xD2	; 210
     18c:	f2 e1       	ldi	r31, 0x12	; 18
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a0 32       	cpi	r26, 0x20	; 32
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	22 e0       	ldi	r18, 0x02	; 2
     19c:	a0 e2       	ldi	r26, 0x20	; 32
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a0 35       	cpi	r26, 0x50	; 80
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	8d d0       	rcall	.+282    	; 0x2c6 <main>
     1ac:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <_exit>

000001b0 <__bad_interrupt>:
     1b0:	27 cf       	rjmp	.-434    	; 0x0 <__vectors>

000001b2 <LEDs_SetAllLEDs>:
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     1b2:	9b b1       	in	r25, 0x0b	; 11
     1b4:	90 63       	ori	r25, 0x30	; 48
     1b6:	80 95       	com	r24
     1b8:	89 23       	and	r24, r25
     1ba:	8b b9       	out	0x0b, r24	; 11
     1bc:	08 95       	ret

000001be <RingBuffer_InitBuffer>:
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1be:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1c0:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     1c2:	fc 01       	movw	r30, r24
     1c4:	e0 58       	subi	r30, 0x80	; 128
     1c6:	ff 4f       	sbci	r31, 0xFF	; 255
     1c8:	91 83       	std	Z+1, r25	; 0x01
     1ca:	80 83       	st	Z, r24
				Buffer->Out = Buffer->Buffer;
     1cc:	32 96       	adiw	r30, 0x02	; 2
     1ce:	91 83       	std	Z+1, r25	; 0x01
     1d0:	80 83       	st	Z, r24
				Buffer->Count = 0;
     1d2:	32 96       	adiw	r30, 0x02	; 2
     1d4:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1d6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     1d8:	08 95       	ret

000001da <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     1da:	fc 01       	movw	r30, r24
     1dc:	e0 58       	subi	r30, 0x80	; 128
     1de:	ff 4f       	sbci	r31, 0xFF	; 255
     1e0:	a0 81       	ld	r26, Z
     1e2:	b1 81       	ldd	r27, Z+1	; 0x01
     1e4:	6c 93       	st	X, r22
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     1e6:	a0 81       	ld	r26, Z
     1e8:	b1 81       	ldd	r27, Z+1	; 0x01
     1ea:	9d 01       	movw	r18, r26
     1ec:	2f 5f       	subi	r18, 0xFF	; 255
     1ee:	3f 4f       	sbci	r19, 0xFF	; 255
     1f0:	31 83       	std	Z+1, r19	; 0x01
     1f2:	20 83       	st	Z, r18
     1f4:	2e 17       	cp	r18, r30
     1f6:	3f 07       	cpc	r19, r31
     1f8:	21 f4       	brne	.+8      	; 0x202 <__DATA_REGION_LENGTH__+0x2>
			  Buffer->In = Buffer->Buffer;
     1fa:	12 96       	adiw	r26, 0x02	; 2
     1fc:	9c 93       	st	X, r25
     1fe:	8e 93       	st	-X, r24
     200:	11 97       	sbiw	r26, 0x01	; 1

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     202:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     204:	f8 94       	cli
			{
				Buffer->Count++;
     206:	fc 01       	movw	r30, r24
     208:	ec 57       	subi	r30, 0x7C	; 124
     20a:	ff 4f       	sbci	r31, 0xFF	; 255
     20c:	80 81       	ld	r24, Z
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     212:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     214:	08 95       	ret

00000216 <RingBuffer_Remove>:
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     216:	dc 01       	movw	r26, r24
     218:	ae 57       	subi	r26, 0x7E	; 126
     21a:	bf 4f       	sbci	r27, 0xFF	; 255
     21c:	ed 91       	ld	r30, X+
     21e:	fc 91       	ld	r31, X
     220:	11 97       	sbiw	r26, 0x01	; 1
     222:	21 91       	ld	r18, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	fc 93       	st	X, r31
     228:	ee 93       	st	-X, r30
     22a:	ac 01       	movw	r20, r24
     22c:	40 58       	subi	r20, 0x80	; 128
     22e:	5f 4f       	sbci	r21, 0xFF	; 255
     230:	e4 17       	cp	r30, r20
     232:	f5 07       	cpc	r31, r21
     234:	11 f4       	brne	.+4      	; 0x23a <RingBuffer_Remove+0x24>
			  Buffer->Out = Buffer->Buffer;
     236:	8d 93       	st	X+, r24
     238:	9c 93       	st	X, r25

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     23a:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     23c:	f8 94       	cli
			{
				Buffer->Count--;
     23e:	fc 01       	movw	r30, r24
     240:	ec 57       	subi	r30, 0x7C	; 124
     242:	ff 4f       	sbci	r31, 0xFF	; 255
     244:	90 81       	ld	r25, Z
     246:	91 50       	subi	r25, 0x01	; 1
     248:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     24a:	3f bf       	out	0x3f, r19	; 63
			}
			
			return Data;
		}
     24c:	82 2f       	mov	r24, r18
     24e:	08 95       	ret

00000250 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     254:	84 b7       	in	r24, 0x34	; 52
     256:	87 7f       	andi	r24, 0xF7	; 247
     258:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	a8 95       	wdr
     260:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     264:	88 61       	ori	r24, 0x18	; 24
     266:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     26a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     26e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     27c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     280:	0f be       	out	0x3f, r0	; 63
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	
	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
     282:	84 e0       	ldi	r24, 0x04	; 4
     284:	85 bd       	out	0x25, r24	; 37
	
	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
     286:	5f 9a       	sbi	0x0b, 7	; 11
	AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
     288:	57 9a       	sbi	0x0a, 7	; 10

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     28a:	e9 ec       	ldi	r30, 0xC9	; 201
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	10 82       	st	Z, r1
	UCSR1A = 0;
     290:	a8 ec       	ldi	r26, 0xC8	; 200
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	1c 92       	st	X, r1
	UCSR1C = 0;
     296:	ca ec       	ldi	r28, 0xCA	; 202
     298:	d0 e0       	ldi	r29, 0x00	; 0
     29a:	18 82       	st	Y, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = SERIAL_2X_UBBRVAL(9600);
     29c:	8f ec       	ldi	r24, 0xCF	; 207
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7fc0cd>
     2a4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7fc0cc>

	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	88 83       	st	Y, r24
	UCSR1A = (1 << U2X1);
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	8c 93       	st	X, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     2b0:	88 e9       	ldi	r24, 0x98	; 152
     2b2:	80 83       	st	Z, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     2b4:	8a b1       	in	r24, 0x0a	; 10
     2b6:	80 63       	ori	r24, 0x30	; 48
     2b8:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
     2ba:	8b b1       	in	r24, 0x0b	; 11
     2bc:	80 63       	ori	r24, 0x30	; 48
     2be:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
	UCSR1A = (1 << U2X1);
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     2c4:	b9 c3       	rjmp	.+1906   	; 0xa38 <USB_Init>

000002c6 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2c6:	c4 df       	rcall	.-120    	; 0x250 <SetupHardware>

	RingBuffer_InitBuffer(&Keyboard_Buffer);
     2c8:	86 e3       	ldi	r24, 0x36	; 54
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	78 df       	rcall	.-272    	; 0x1be <RingBuffer_InitBuffer>
	RingBuffer_InitBuffer(&Mouse_Buffer);
     2ce:	8e eb       	ldi	r24, 0xBE	; 190
     2d0:	91 e0       	ldi	r25, 0x01	; 1

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2d2:	75 df       	rcall	.-278    	; 0x1be <RingBuffer_InitBuffer>
     2d4:	80 e2       	ldi	r24, 0x20	; 32
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2d6:	6d df       	rcall	.-294    	; 0x1b2 <LEDs_SetAllLEDs>
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     2d8:	78 94       	sei
     2da:	80 e1       	ldi	r24, 0x10	; 16
		HID_Device_USBTask(&Mouse_HID_Interface);
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	21 d7       	rcall	.+3650   	; 0x1122 <HID_Device_USBTask>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
     2e4:	1e d7       	rcall	.+3644   	; 0x1122 <HID_Device_USBTask>
     2e6:	bd d5       	rcall	.+2938   	; 0xe62 <USB_USBTask>
     2e8:	f8 cf       	rjmp	.-16     	; 0x2da <main+0x14>

000002ea <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2ea:	80 e1       	ldi	r24, 0x10	; 16
     2ec:	62 cf       	rjmp	.-316    	; 0x1b2 <LEDs_SetAllLEDs>

000002ee <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2ee:	80 e2       	ldi	r24, 0x20	; 32
     2f0:	60 cf       	rjmp	.-320    	; 0x1b2 <LEDs_SetAllLEDs>

000002f2 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     2f2:	cf 93       	push	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     2f4:	80 e1       	ldi	r24, 0x10	; 16
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	01 d7       	rcall	.+3586   	; 0x10fc <HID_Device_ConfigureEndpoints>
     2fa:	c8 2f       	mov	r28, r24
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	fd d6       	rcall	.+3578   	; 0x10fc <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     302:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     306:	94 60       	ori	r25, 0x04	; 4
     308:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     30c:	cc 23       	and	r28, r28
     30e:	11 f0       	breq	.+4      	; 0x314 <__stack+0x15>
     310:	81 11       	cpse	r24, r1
     312:	02 c0       	rjmp	.+4      	; 0x318 <__stack+0x19>
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	01 c0       	rjmp	.+2      	; 0x31a <__stack+0x1b>
}
     318:	80 e1       	ldi	r24, 0x10	; 16
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     31a:	cf 91       	pop	r28
     31c:	4a cf       	rjmp	.-364    	; 0x1b2 <LEDs_SetAllLEDs>

0000031e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     31e:	80 e1       	ldi	r24, 0x10	; 16
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	b9 d5       	rcall	.+2930   	; 0xe96 <HID_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	b6 c5       	rjmp	.+2924   	; 0xe96 <HID_Device_ProcessControlRequest>

0000032a <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1)
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     32a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Keyboard_HID_Interface+0xe>
     32e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Keyboard_HID_Interface+0xf>
     332:	00 97       	sbiw	r24, 0x00	; 0
     334:	29 f0       	breq	.+10     	; 0x340 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Keyboard_HID_Interface+0xf>
     33c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Keyboard_HID_Interface+0xe>
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1)
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     340:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     344:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     348:	00 97       	sbiw	r24, 0x00	; 0
     34a:	29 f0       	breq	.+10     	; 0x356 <EVENT_USB_Device_StartOfFrame+0x2c>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     352:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     356:	08 95       	ret

00000358 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <CALLBACK_HID_Device_CreateHIDReport+0x16>
     36e:	1f 92       	push	r1
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	79 01       	movw	r14, r18
	if(HIDInterfaceInfo->Config.InterfaceNumber == Mouse_HID_Interface.Config.InterfaceNumber) {
     376:	fc 01       	movw	r30, r24
     378:	90 81       	ld	r25, Z
     37a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     37e:	98 13       	cpse	r25, r24
     380:	2c c0       	rjmp	.+88     	; 0x3da <CALLBACK_HID_Device_CreateHIDReport+0x82>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     382:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     384:	f8 94       	cli
			{
				Count = Buffer->Count;
     386:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <Mouse_Buffer+0x84>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     38a:	9f bf       	out	0x3f, r25	; 63
		
	    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&Mouse_Buffer);

	    if (BufferCount >= MOUSE_COMMAND_SIZE) {
     38c:	84 30       	cpi	r24, 0x04	; 4
     38e:	c0 f0       	brcs	.+48     	; 0x3c0 <CALLBACK_HID_Device_CreateHIDReport+0x68>
			
			int ind;
			USB_MouseReport_Data_t newMouseReport;
			for (ind=0; ind<3; ind++) {
		    	((uint8_t *)&newMouseReport)[ind] = RingBuffer_Remove(&Mouse_Buffer);
     390:	8e eb       	ldi	r24, 0xBE	; 190
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	40 df       	rcall	.-384    	; 0x216 <RingBuffer_Remove>
     396:	89 83       	std	Y+1, r24	; 0x01
     398:	8e eb       	ldi	r24, 0xBE	; 190
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	3c df       	rcall	.-392    	; 0x216 <RingBuffer_Remove>
     39e:	8a 83       	std	Y+2, r24	; 0x02
     3a0:	8e eb       	ldi	r24, 0xBE	; 190
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	38 df       	rcall	.-400    	; 0x216 <RingBuffer_Remove>
     3a6:	8b 83       	std	Y+3, r24	; 0x03
			}

			RingBuffer_Remove(&Mouse_Buffer);	// unused wheel for now
     3a8:	8e eb       	ldi	r24, 0xBE	; 190
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	34 df       	rcall	.-408    	; 0x216 <RingBuffer_Remove>
     3ae:	89 81       	ldd	r24, Y+1	; 0x01

			mouseReport.Button = newMouseReport.Button;
     3b0:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <mouseReport>
     3b4:	8a 81       	ldd	r24, Y+2	; 0x02
			mouseReport.X = newMouseReport.X;
     3b6:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <mouseReport+0x1>
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
			mouseReport.Y = newMouseReport.Y;
     3bc:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <mouseReport+0x2>
     3c0:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <mouseReport>
	    }
		USB_MouseReport_Data_t* reportp = (USB_MouseReport_Data_t*)ReportData;

		*reportp = mouseReport;
     3c4:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <mouseReport+0x1>
     3c8:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <mouseReport+0x2>
     3cc:	f7 01       	movw	r30, r14
     3ce:	80 83       	st	Z, r24
     3d0:	91 83       	std	Z+1, r25	; 0x01
     3d2:	a2 83       	std	Z+2, r26	; 0x02
     3d4:	83 e0       	ldi	r24, 0x03	; 3

		*ReportSize = sizeof(USB_MouseReport_Data_t);
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	25 c0       	rjmp	.+74     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3da:	9f b7       	in	r25, 0x3f	; 63
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3dc:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3de:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <Keyboard_Buffer+0x84>
			{
				Count = Buffer->Count;
     3e2:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3e4:	88 30       	cpi	r24, 0x08	; 8
	uint8_t *datap = ReportData;
	int ind;

	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&Keyboard_Buffer);

	if (BufferCount >= 8) {
     3e6:	20 f4       	brcc	.+8      	; 0x3f0 <CALLBACK_HID_Device_CreateHIDReport+0x98>
     3e8:	a3 e2       	ldi	r26, 0x23	; 35
     3ea:	b1 e0       	ldi	r27, 0x01	; 1
     3ec:	f7 01       	movw	r30, r14
     3ee:	12 c0       	rjmp	.+36     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3f0:	83 e2       	ldi	r24, 0x23	; 35
     3f2:	c8 2e       	mov	r12, r24
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	d8 2e       	mov	r13, r24
     3f8:	9b e2       	ldi	r25, 0x2B	; 43
     3fa:	a9 2e       	mov	r10, r25
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	b9 2e       	mov	r11, r25
	    for (ind=0; ind<8; ind++) {
		keyboardData[ind] = RingBuffer_Remove(&Keyboard_Buffer);
     400:	86 e3       	ldi	r24, 0x36	; 54
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	08 df       	rcall	.-496    	; 0x216 <RingBuffer_Remove>
     406:	f6 01       	movw	r30, r12
     408:	81 93       	st	Z+, r24
     40a:	6f 01       	movw	r12, r30
     40c:	ae 16       	cp	r10, r30
	int ind;

	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&Keyboard_Buffer);

	if (BufferCount >= 8) {
	    for (ind=0; ind<8; ind++) {
     40e:	bf 06       	cpc	r11, r31
     410:	b9 f7       	brne	.-18     	; 0x400 <__LOCK_REGION_LENGTH__>
     412:	ea cf       	rjmp	.-44     	; 0x3e8 <CALLBACK_HID_Device_CreateHIDReport+0x90>
     414:	8d 91       	ld	r24, X+
		keyboardData[ind] = RingBuffer_Remove(&Keyboard_Buffer);
	    }
	}

	for (ind=0; ind<8; ind++) {
	    datap[ind] = keyboardData[ind];
     416:	81 93       	st	Z+, r24
     418:	81 e0       	ldi	r24, 0x01	; 1
	    for (ind=0; ind<8; ind++) {
		keyboardData[ind] = RingBuffer_Remove(&Keyboard_Buffer);
	    }
	}

	for (ind=0; ind<8; ind++) {
     41a:	ab 32       	cpi	r26, 0x2B	; 43
     41c:	b8 07       	cpc	r27, r24
     41e:	d1 f7       	brne	.-12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     420:	88 e0       	ldi	r24, 0x08	; 8
	    datap[ind] = keyboardData[ind];
	}

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	f8 01       	movw	r30, r16
     426:	91 83       	std	Z+1, r25	; 0x01
     428:	80 83       	st	Z, r24
     42a:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	df 90       	pop	r13
     440:	cf 90       	pop	r12
     442:	bf 90       	pop	r11
     444:	af 90       	pop	r10
     446:	08 95       	ret

00000448 <CALLBACK_HID_Device_ProcessHIDReport>:
     448:	80 51       	subi	r24, 0x10	; 16
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     44a:	91 40       	sbci	r25, 0x01	; 1
     44c:	41 f4       	brne	.+16     	; 0x45e <CALLBACK_HID_Device_ProcessHIDReport+0x16>
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
		uint8_t* LEDReport = (uint8_t*)ReportData;

		if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     44e:	f9 01       	movw	r30, r18
     450:	80 81       	ld	r24, Z
     452:	80 ff       	sbrs	r24, 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <CALLBACK_HID_Device_ProcessHIDReport+0x12>
		  LEDMask |= LEDS_LED1;
     456:	80 e2       	ldi	r24, 0x20	; 32
     458:	01 c0       	rjmp	.+2      	; 0x45c <CALLBACK_HID_Device_ProcessHIDReport+0x14>
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
     45a:	80 e0       	ldi	r24, 0x00	; 0
		  LEDMask |= LEDS_LED3;

		if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
		  LEDMask |= LEDS_LED4;

		LEDs_SetAllLEDs(LEDMask);
     45c:	aa ce       	rjmp	.-684    	; 0x1b2 <LEDs_SetAllLEDs>
     45e:	08 95       	ret

00000460 <__vector_23>:
}

int8_t CurrentCommand = 0;
int8_t CommandBuffered = 0;
ISR(USART1_RX_vect, ISR_BLOCK)
{
     460:	1f 92       	push	r1
     462:	0f 92       	push	r0
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	0f 92       	push	r0
     468:	11 24       	eor	r1, r1
     46a:	2f 93       	push	r18
     46c:	3f 93       	push	r19
     46e:	4f 93       	push	r20
     470:	5f 93       	push	r21
     472:	6f 93       	push	r22
     474:	7f 93       	push	r23
     476:	8f 93       	push	r24
     478:	9f 93       	push	r25
     47a:	af 93       	push	r26
     47c:	bf 93       	push	r27
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     482:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7fc0ce>
	if(ReceivedByte == COMMAND_RESET){
     486:	6f 3f       	cpi	r22, 0xFF	; 255
     488:	59 f4       	brne	.+22     	; 0x4a0 <__vector_23+0x40>
		CurrentCommand = 0;
     48a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <CurrentCommand>
		CommandBuffered = 0;
     48e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
		RingBuffer_InitBuffer(&Keyboard_Buffer);
     492:	86 e3       	ldi	r24, 0x36	; 54
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	93 de       	rcall	.-730    	; 0x1be <RingBuffer_InitBuffer>
		RingBuffer_InitBuffer(&Mouse_Buffer);
     498:	8e eb       	ldi	r24, 0xBE	; 190
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	90 de       	rcall	.-736    	; 0x1be <RingBuffer_InitBuffer>
		return;
     49e:	26 c0       	rjmp	.+76     	; 0x4ec <__vector_23+0x8c>
	}
	if (USB_DeviceState == DEVICE_STATE_Configured){
     4a0:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     4a4:	84 30       	cpi	r24, 0x04	; 4
     4a6:	11 f5       	brne	.+68     	; 0x4ec <__vector_23+0x8c>
		if(CurrentCommand == COMMAND_KEYBOARD){
     4a8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <CurrentCommand>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	79 f4       	brne	.+30     	; 0x4ce <__vector_23+0x6e>
			RingBuffer_Insert(&Keyboard_Buffer, ReceivedByte);
     4b0:	86 e3       	ldi	r24, 0x36	; 54
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	92 de       	rcall	.-732    	; 0x1da <RingBuffer_Insert>
			CommandBuffered++;
     4b6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     4ba:	8f 5f       	subi	r24, 0xFF	; 255
     4bc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			if(CommandBuffered >= KEYBOARD_COMMAND_SIZE){
     4c0:	88 30       	cpi	r24, 0x08	; 8
     4c2:	a4 f0       	brlt	.+40     	; 0x4ec <__vector_23+0x8c>
				CurrentCommand = 0;
     4c4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <CurrentCommand>
				CommandBuffered = 0;
     4c8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     4cc:	0f c0       	rjmp	.+30     	; 0x4ec <__vector_23+0x8c>
			}
		}
		else if(CurrentCommand == COMMAND_MOUSE){
     4ce:	82 30       	cpi	r24, 0x02	; 2
			RingBuffer_Insert(&Mouse_Buffer, ReceivedByte);
     4d0:	59 f4       	brne	.+22     	; 0x4e8 <__vector_23+0x88>
     4d2:	8e eb       	ldi	r24, 0xBE	; 190
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	81 de       	rcall	.-766    	; 0x1da <RingBuffer_Insert>
			CommandBuffered++;
     4d8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     4dc:	8f 5f       	subi	r24, 0xFF	; 255
     4de:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			if(CommandBuffered >= MOUSE_COMMAND_SIZE){
     4e2:	84 30       	cpi	r24, 0x04	; 4
     4e4:	7c f7       	brge	.-34     	; 0x4c4 <__vector_23+0x64>
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__vector_23+0x8c>
				CurrentCommand = 0;
				CommandBuffered = 0;
			}
		}
		else{
				CurrentCommand = ReceivedByte;
     4e8:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <CurrentCommand>
		}
	}
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     50e:	29 2f       	mov	r18, r25
     510:	33 27       	eor	r19, r19
     512:	23 30       	cpi	r18, 0x03	; 3
     514:	31 05       	cpc	r19, r1
     516:	c9 f0       	breq	.+50     	; 0x54a <CALLBACK_USB_GetDescriptor+0x3c>
     518:	60 f4       	brcc	.+24     	; 0x532 <CALLBACK_USB_GetDescriptor+0x24>
     51a:	21 30       	cpi	r18, 0x01	; 1
     51c:	31 05       	cpc	r19, r1
     51e:	81 f0       	breq	.+32     	; 0x540 <CALLBACK_USB_GetDescriptor+0x32>
     520:	22 30       	cpi	r18, 0x02	; 2
     522:	31 05       	cpc	r19, r1
     524:	09 f0       	breq	.+2      	; 0x528 <CALLBACK_USB_GetDescriptor+0x1a>
     526:	44 c0       	rjmp	.+136    	; 0x5b0 <CALLBACK_USB_GetDescriptor+0xa2>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     528:	8b e3       	ldi	r24, 0x3B	; 59
     52a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     52c:	28 eb       	ldi	r18, 0xB8	; 184
     52e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     530:	43 c0       	rjmp	.+134    	; 0x5b8 <CALLBACK_USB_GetDescriptor+0xaa>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     532:	21 32       	cpi	r18, 0x21	; 33
     534:	31 05       	cpc	r19, r1
     536:	e1 f0       	breq	.+56     	; 0x570 <CALLBACK_USB_GetDescriptor+0x62>
     538:	22 32       	cpi	r18, 0x22	; 34
     53a:	31 05       	cpc	r19, r1
     53c:	49 f1       	breq	.+82     	; 0x590 <CALLBACK_USB_GetDescriptor+0x82>
     53e:	38 c0       	rjmp	.+112    	; 0x5b0 <CALLBACK_USB_GetDescriptor+0xa2>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     540:	82 e1       	ldi	r24, 0x12	; 18
     542:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     544:	23 ef       	ldi	r18, 0xF3	; 243
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	37 c0       	rjmp	.+110    	; 0x5b8 <CALLBACK_USB_GetDescriptor+0xaa>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     54a:	99 27       	eor	r25, r25
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	91 05       	cpc	r25, r1
     550:	49 f0       	breq	.+18     	; 0x564 <CALLBACK_USB_GetDescriptor+0x56>
     552:	28 f0       	brcs	.+10     	; 0x55e <CALLBACK_USB_GetDescriptor+0x50>
     554:	02 97       	sbiw	r24, 0x02	; 2
     556:	61 f5       	brne	.+88     	; 0x5b0 <CALLBACK_USB_GetDescriptor+0xa2>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     558:	e4 e7       	ldi	r30, 0x74	; 116
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	05 c0       	rjmp	.+10     	; 0x568 <CALLBACK_USB_GetDescriptor+0x5a>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     55e:	e4 eb       	ldi	r30, 0xB4	; 180
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	02 c0       	rjmp	.+4      	; 0x568 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     564:	e0 ea       	ldi	r30, 0xA0	; 160
     566:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     568:	84 91       	lpm	r24, Z
     56a:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     56c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     56e:	24 c0       	rjmp	.+72     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0xaa>
			}

			break;
		case HID_DTYPE_HID:
			switch (wIndex)
     570:	61 15       	cp	r22, r1
     572:	71 05       	cpc	r23, r1
     574:	41 f0       	breq	.+16     	; 0x586 <CALLBACK_USB_GetDescriptor+0x78>
     576:	61 30       	cpi	r22, 0x01	; 1
     578:	71 05       	cpc	r23, r1
     57a:	d1 f4       	brne	.+52     	; 0x5b0 <CALLBACK_USB_GetDescriptor+0xa2>
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
					break;
				case INTERFACE_ID_Mouse:
					Address = &ConfigurationDescriptor.HID2_MouseHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
     57c:	89 e0       	ldi	r24, 0x09	; 9
     57e:	90 e0       	ldi	r25, 0x00	; 0
				case INTERFACE_ID_Keyboard:
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
					break;
				case INTERFACE_ID_Mouse:
					Address = &ConfigurationDescriptor.HID2_MouseHID;
     580:	23 ee       	ldi	r18, 0xE3	; 227
     582:	30 e0       	ldi	r19, 0x00	; 0
					Size    = sizeof(USB_HID_Descriptor_HID_t);
					break;
     584:	19 c0       	rjmp	.+50     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0xaa>
		case HID_DTYPE_HID:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
     586:	89 e0       	ldi	r24, 0x09	; 9
     588:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case HID_DTYPE_HID:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
     58a:	2a ec       	ldi	r18, 0xCA	; 202
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	14 c0       	rjmp	.+40     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0xaa>
					break;
			}

			break;
		case HID_DTYPE_Report:
			switch (wIndex)
     590:	61 15       	cp	r22, r1
     592:	71 05       	cpc	r23, r1
     594:	41 f0       	breq	.+16     	; 0x5a6 <CALLBACK_USB_GetDescriptor+0x98>
     596:	61 30       	cpi	r22, 0x01	; 1
     598:	71 05       	cpc	r23, r1
     59a:	51 f4       	brne	.+20     	; 0x5b0 <CALLBACK_USB_GetDescriptor+0xa2>
					Address = &KeyboardReport;
					Size    = sizeof(KeyboardReport);
					break;
				case INTERFACE_ID_Mouse:
					Address = &MouseReport;
					Size    = sizeof(MouseReport);
     59c:	82 e3       	ldi	r24, 0x32	; 50
     59e:	90 e0       	ldi	r25, 0x00	; 0
				case INTERFACE_ID_Keyboard:
					Address = &KeyboardReport;
					Size    = sizeof(KeyboardReport);
					break;
				case INTERFACE_ID_Mouse:
					Address = &MouseReport;
     5a0:	25 e4       	ldi	r18, 0x45	; 69
     5a2:	31 e0       	ldi	r19, 0x01	; 1
					Size    = sizeof(MouseReport);
					break;
     5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0xaa>
		case HID_DTYPE_Report:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &KeyboardReport;
					Size    = sizeof(KeyboardReport);
     5a6:	80 e4       	ldi	r24, 0x40	; 64
     5a8:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case HID_DTYPE_Report:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &KeyboardReport;
     5aa:	25 e0       	ldi	r18, 0x05	; 5
     5ac:	31 e0       	ldi	r19, 0x01	; 1
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <CALLBACK_USB_GetDescriptor+0xaa>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     5b8:	fa 01       	movw	r30, r20
     5ba:	31 83       	std	Z+1, r19	; 0x01
     5bc:	20 83       	st	Z, r18
	return Size;
}
     5be:	08 95       	ret

000005c0 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	8b 01       	movw	r16, r22
     5d4:	7a 01       	movw	r14, r20
     5d6:	c4 d1       	rcall	.+904    	; 0x960 <Endpoint_WaitUntilReady>
     5d8:	81 11       	cpse	r24, r1
     5da:	33 c0       	rjmp	.+102    	; 0x642 <Endpoint_Write_Stream_LE+0x82>
     5dc:	e1 14       	cp	r14, r1
     5de:	f1 04       	cpc	r15, r1
     5e0:	39 f0       	breq	.+14     	; 0x5f0 <Endpoint_Write_Stream_LE+0x30>
     5e2:	f7 01       	movw	r30, r14
     5e4:	80 81       	ld	r24, Z
     5e6:	91 81       	ldd	r25, Z+1	; 0x01
     5e8:	08 1b       	sub	r16, r24
     5ea:	19 0b       	sbc	r17, r25
     5ec:	c8 0f       	add	r28, r24
     5ee:	d9 1f       	adc	r29, r25
     5f0:	c1 2c       	mov	r12, r1
     5f2:	d1 2c       	mov	r13, r1
     5f4:	01 15       	cp	r16, r1
     5f6:	11 05       	cpc	r17, r1
     5f8:	19 f1       	breq	.+70     	; 0x640 <Endpoint_Write_Stream_LE+0x80>
     5fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5fe:	85 fd       	sbrc	r24, 5
     600:	16 c0       	rjmp	.+44     	; 0x62e <Endpoint_Write_Stream_LE+0x6e>
     602:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     606:	8e 77       	andi	r24, 0x7E	; 126
     608:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     60c:	2a d4       	rcall	.+2132   	; 0xe62 <USB_USBTask>
     60e:	e1 14       	cp	r14, r1
     610:	f1 04       	cpc	r15, r1
     612:	49 f0       	breq	.+18     	; 0x626 <Endpoint_Write_Stream_LE+0x66>
     614:	f7 01       	movw	r30, r14
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	c8 0e       	add	r12, r24
     61c:	d9 1e       	adc	r13, r25
     61e:	d1 82       	std	Z+1, r13	; 0x01
     620:	c0 82       	st	Z, r12
     622:	85 e0       	ldi	r24, 0x05	; 5
     624:	0e c0       	rjmp	.+28     	; 0x642 <Endpoint_Write_Stream_LE+0x82>
     626:	9c d1       	rcall	.+824    	; 0x960 <Endpoint_WaitUntilReady>
     628:	88 23       	and	r24, r24
     62a:	21 f3       	breq	.-56     	; 0x5f4 <Endpoint_Write_Stream_LE+0x34>
     62c:	0a c0       	rjmp	.+20     	; 0x642 <Endpoint_Write_Stream_LE+0x82>
     62e:	89 91       	ld	r24, Y+
     630:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     634:	01 50       	subi	r16, 0x01	; 1
     636:	11 09       	sbc	r17, r1
     638:	ff ef       	ldi	r31, 0xFF	; 255
     63a:	cf 1a       	sub	r12, r31
     63c:	df 0a       	sbc	r13, r31
     63e:	da cf       	rjmp	.-76     	; 0x5f4 <Endpoint_Write_Stream_LE+0x34>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	08 95       	ret

00000654 <Endpoint_Write_Control_Stream_LE>:
     654:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <USB_ControlRequest+0x6>
     658:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <USB_ControlRequest+0x7>
     65c:	26 17       	cp	r18, r22
     65e:	37 07       	cpc	r19, r23
     660:	48 f0       	brcs	.+18     	; 0x674 <Endpoint_Write_Control_Stream_LE+0x20>
     662:	61 15       	cp	r22, r1
     664:	71 05       	cpc	r23, r1
     666:	39 f4       	brne	.+14     	; 0x676 <Endpoint_Write_Control_Stream_LE+0x22>
     668:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     66c:	2e 77       	andi	r18, 0x7E	; 126
     66e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     672:	01 c0       	rjmp	.+2      	; 0x676 <Endpoint_Write_Control_Stream_LE+0x22>
     674:	b9 01       	movw	r22, r18
     676:	fc 01       	movw	r30, r24
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	61 15       	cp	r22, r1
     67c:	71 05       	cpc	r23, r1
     67e:	61 f1       	breq	.+88     	; 0x6d8 <Endpoint_Write_Control_Stream_LE+0x84>
     680:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     684:	88 23       	and	r24, r24
     686:	d9 f1       	breq	.+118    	; 0x6fe <Endpoint_Write_Control_Stream_LE+0xaa>
     688:	85 30       	cpi	r24, 0x05	; 5
     68a:	d9 f1       	breq	.+118    	; 0x702 <Endpoint_Write_Control_Stream_LE+0xae>
     68c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     690:	83 fd       	sbrc	r24, 3
     692:	39 c0       	rjmp	.+114    	; 0x706 <Endpoint_Write_Control_Stream_LE+0xb2>
     694:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     698:	82 fd       	sbrc	r24, 2
     69a:	2b c0       	rjmp	.+86     	; 0x6f2 <Endpoint_Write_Control_Stream_LE+0x9e>
     69c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6a0:	80 ff       	sbrs	r24, 0
     6a2:	eb cf       	rjmp	.-42     	; 0x67a <Endpoint_Write_Control_Stream_LE+0x26>
     6a4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	61 15       	cp	r22, r1
     6ac:	71 05       	cpc	r23, r1
     6ae:	51 f0       	breq	.+20     	; 0x6c4 <Endpoint_Write_Control_Stream_LE+0x70>
     6b0:	88 30       	cpi	r24, 0x08	; 8
     6b2:	91 05       	cpc	r25, r1
     6b4:	38 f4       	brcc	.+14     	; 0x6c4 <Endpoint_Write_Control_Stream_LE+0x70>
     6b6:	21 91       	ld	r18, Z+
     6b8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     6bc:	61 50       	subi	r22, 0x01	; 1
     6be:	71 09       	sbc	r23, r1
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	f3 cf       	rjmp	.-26     	; 0x6aa <Endpoint_Write_Control_Stream_LE+0x56>
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	08 97       	sbiw	r24, 0x08	; 8
     6c8:	09 f0       	breq	.+2      	; 0x6cc <Endpoint_Write_Control_Stream_LE+0x78>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6d0:	8e 77       	andi	r24, 0x7E	; 126
     6d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6d6:	d1 cf       	rjmp	.-94     	; 0x67a <Endpoint_Write_Control_Stream_LE+0x26>
     6d8:	21 11       	cpse	r18, r1
     6da:	d2 cf       	rjmp	.-92     	; 0x680 <Endpoint_Write_Control_Stream_LE+0x2c>
     6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <Endpoint_Write_Control_Stream_LE+0x9e>
     6de:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     6e2:	88 23       	and	r24, r24
     6e4:	61 f0       	breq	.+24     	; 0x6fe <Endpoint_Write_Control_Stream_LE+0xaa>
     6e6:	85 30       	cpi	r24, 0x05	; 5
     6e8:	61 f0       	breq	.+24     	; 0x702 <Endpoint_Write_Control_Stream_LE+0xae>
     6ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6ee:	83 fd       	sbrc	r24, 3
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <Endpoint_Write_Control_Stream_LE+0xb2>
     6f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6f6:	82 ff       	sbrs	r24, 2
     6f8:	f2 cf       	rjmp	.-28     	; 0x6de <Endpoint_Write_Control_Stream_LE+0x8a>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	08 95       	ret
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	08 95       	ret
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	08 95       	ret
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	08 95       	ret

0000070a <Endpoint_Read_Control_Stream_LE>:
     70a:	61 15       	cp	r22, r1
     70c:	71 05       	cpc	r23, r1
     70e:	29 f4       	brne	.+10     	; 0x71a <Endpoint_Read_Control_Stream_LE+0x10>
     710:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     714:	2b 77       	andi	r18, 0x7B	; 123
     716:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     71a:	fc 01       	movw	r30, r24
     71c:	61 15       	cp	r22, r1
     71e:	71 05       	cpc	r23, r1
     720:	21 f1       	breq	.+72     	; 0x76a <Endpoint_Read_Control_Stream_LE+0x60>
     722:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     726:	88 23       	and	r24, r24
     728:	41 f1       	breq	.+80     	; 0x77a <Endpoint_Read_Control_Stream_LE+0x70>
     72a:	85 30       	cpi	r24, 0x05	; 5
     72c:	41 f1       	breq	.+80     	; 0x77e <Endpoint_Read_Control_Stream_LE+0x74>
     72e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     732:	83 fd       	sbrc	r24, 3
     734:	20 c0       	rjmp	.+64     	; 0x776 <Endpoint_Read_Control_Stream_LE+0x6c>
     736:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     73a:	82 ff       	sbrs	r24, 2
     73c:	ef cf       	rjmp	.-34     	; 0x71c <Endpoint_Read_Control_Stream_LE+0x12>
     73e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     742:	88 23       	and	r24, r24
     744:	31 f0       	breq	.+12     	; 0x752 <Endpoint_Read_Control_Stream_LE+0x48>
     746:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     74a:	81 93       	st	Z+, r24
     74c:	61 50       	subi	r22, 0x01	; 1
     74e:	71 09       	sbc	r23, r1
     750:	b1 f7       	brne	.-20     	; 0x73e <Endpoint_Read_Control_Stream_LE+0x34>
     752:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     756:	8b 77       	andi	r24, 0x7B	; 123
     758:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     75c:	df cf       	rjmp	.-66     	; 0x71c <Endpoint_Read_Control_Stream_LE+0x12>
     75e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     762:	88 23       	and	r24, r24
     764:	51 f0       	breq	.+20     	; 0x77a <Endpoint_Read_Control_Stream_LE+0x70>
     766:	85 30       	cpi	r24, 0x05	; 5
     768:	51 f0       	breq	.+20     	; 0x77e <Endpoint_Read_Control_Stream_LE+0x74>
     76a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     76e:	80 ff       	sbrs	r24, 0
     770:	f6 cf       	rjmp	.-20     	; 0x75e <Endpoint_Read_Control_Stream_LE+0x54>
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	08 95       	ret
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	08 95       	ret
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	08 95       	ret

00000782 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     782:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <USB_ControlRequest+0x6>
     786:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <USB_ControlRequest+0x7>
     78a:	26 17       	cp	r18, r22
     78c:	37 07       	cpc	r19, r23
     78e:	48 f0       	brcs	.+18     	; 0x7a2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     790:	61 15       	cp	r22, r1
     792:	71 05       	cpc	r23, r1
     794:	39 f4       	brne	.+14     	; 0x7a4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     796:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     79a:	2e 77       	andi	r18, 0x7E	; 126
     79c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <Endpoint_Write_Control_PStream_LE+0x22>
     7a2:	b9 01       	movw	r22, r18
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7a8:	61 15       	cp	r22, r1
     7aa:	71 05       	cpc	r23, r1
     7ac:	79 f1       	breq	.+94     	; 0x80c <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7ae:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7b2:	88 23       	and	r24, r24
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0x36>
     7b6:	3d c0       	rjmp	.+122    	; 0x832 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7b8:	85 30       	cpi	r24, 0x05	; 5
     7ba:	09 f4       	brne	.+2      	; 0x7be <Endpoint_Write_Control_PStream_LE+0x3c>
     7bc:	3c c0       	rjmp	.+120    	; 0x836 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7c2:	83 fd       	sbrc	r24, 3
     7c4:	3a c0       	rjmp	.+116    	; 0x83a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7ca:	82 fd       	sbrc	r24, 2
     7cc:	2c c0       	rjmp	.+88     	; 0x826 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
     7d2:	80 ff       	sbrs	r24, 0
     7d4:	e9 cf       	rjmp	.-46     	; 0x7a8 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     7d6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     7da:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7dc:	61 15       	cp	r22, r1
     7de:	71 05       	cpc	r23, r1
     7e0:	59 f0       	breq	.+22     	; 0x7f8 <Endpoint_Write_Control_PStream_LE+0x76>
     7e2:	88 30       	cpi	r24, 0x08	; 8
     7e4:	91 05       	cpc	r25, r1
     7e6:	40 f4       	brcc	.+16     	; 0x7f8 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7e8:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7ea:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     7ee:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     7f0:	61 50       	subi	r22, 0x01	; 1
     7f2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	f2 cf       	rjmp	.-28     	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	08 97       	sbiw	r24, 0x08	; 8
     7fc:	09 f0       	breq	.+2      	; 0x800 <Endpoint_Write_Control_PStream_LE+0x7e>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     800:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     804:	8e 77       	andi	r24, 0x7E	; 126
     806:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     80a:	ce cf       	rjmp	.-100    	; 0x7a8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     80c:	21 11       	cpse	r18, r1
     80e:	cf cf       	rjmp	.-98     	; 0x7ae <Endpoint_Write_Control_PStream_LE+0x2c>
     810:	0a c0       	rjmp	.+20     	; 0x826 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     812:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     816:	88 23       	and	r24, r24
     818:	61 f0       	breq	.+24     	; 0x832 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     81a:	85 30       	cpi	r24, 0x05	; 5
     81c:	61 f0       	breq	.+24     	; 0x836 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     81e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     822:	83 fd       	sbrc	r24, 3
     824:	0a c0       	rjmp	.+20     	; 0x83a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     826:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     82a:	82 ff       	sbrs	r24, 2
     82c:	f2 cf       	rjmp	.-28     	; 0x812 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     83a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     83c:	08 95       	ret

0000083e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     83e:	98 2f       	mov	r25, r24
     840:	95 30       	cpi	r25, 0x05	; 5
     842:	68 f5       	brcc	.+90     	; 0x89e <Endpoint_ConfigureEndpoint_Prv+0x60>
     844:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     848:	98 17       	cp	r25, r24
     84a:	39 f0       	breq	.+14     	; 0x85a <Endpoint_ConfigureEndpoint_Prv+0x1c>
     84c:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     850:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     854:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     858:	03 c0       	rjmp	.+6      	; 0x860 <Endpoint_ConfigureEndpoint_Prv+0x22>
     85a:	24 2f       	mov	r18, r20
     85c:	76 2f       	mov	r23, r22
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	21 fd       	sbrc	r18, 1
     862:	02 c0       	rjmp	.+4      	; 0x868 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     864:	9f 5f       	subi	r25, 0xFF	; 255
     866:	ec cf       	rjmp	.-40     	; 0x840 <Endpoint_ConfigureEndpoint_Prv+0x2>
     868:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     86c:	3e 7f       	andi	r19, 0xFE	; 254
     86e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     872:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     876:	3d 7f       	andi	r19, 0xFD	; 253
     878:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     87c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     880:	31 60       	ori	r19, 0x01	; 1
     882:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     886:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     88a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     88e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     892:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     896:	27 fd       	sbrc	r18, 7
     898:	e5 cf       	rjmp	.-54     	; 0x864 <Endpoint_ConfigureEndpoint_Prv+0x26>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	08 95       	ret
     89e:	8f 70       	andi	r24, 0x0F	; 15
     8a0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	08 95       	ret

000008a8 <Endpoint_ConfigureEndpointTable>:
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	06 2f       	mov	r16, r22
     8b2:	ec 01       	movw	r28, r24
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	10 17       	cp	r17, r16
     8b8:	71 f1       	breq	.+92     	; 0x916 <Endpoint_ConfigureEndpointTable+0x6e>
     8ba:	98 81       	ld	r25, Y
     8bc:	91 11       	cpse	r25, r1
     8be:	03 c0       	rjmp	.+6      	; 0x8c6 <Endpoint_ConfigureEndpointTable+0x1e>
     8c0:	1f 5f       	subi	r17, 0xFF	; 255
     8c2:	25 96       	adiw	r28, 0x05	; 5
     8c4:	f8 cf       	rjmp	.-16     	; 0x8b6 <Endpoint_ConfigureEndpointTable+0xe>
     8c6:	2c 81       	ldd	r18, Y+4	; 0x04
     8c8:	a9 81       	ldd	r26, Y+1	; 0x01
     8ca:	ba 81       	ldd	r27, Y+2	; 0x02
     8cc:	6b 81       	ldd	r22, Y+3	; 0x03
     8ce:	89 2f       	mov	r24, r25
     8d0:	8f 70       	andi	r24, 0x0F	; 15
     8d2:	85 30       	cpi	r24, 0x05	; 5
     8d4:	10 f0       	brcs	.+4      	; 0x8da <Endpoint_ConfigureEndpointTable+0x32>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	1f c0       	rjmp	.+62     	; 0x918 <Endpoint_ConfigureEndpointTable+0x70>
     8da:	22 30       	cpi	r18, 0x02	; 2
     8dc:	10 f4       	brcc	.+4      	; 0x8e2 <Endpoint_ConfigureEndpointTable+0x3a>
     8de:	42 e0       	ldi	r20, 0x02	; 2
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <Endpoint_ConfigureEndpointTable+0x3c>
     8e2:	46 e0       	ldi	r20, 0x06	; 6
     8e4:	e8 e0       	ldi	r30, 0x08	; 8
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	ea 17       	cp	r30, r26
     8ec:	fb 07       	cpc	r31, r27
     8ee:	20 f4       	brcc	.+8      	; 0x8f8 <Endpoint_ConfigureEndpointTable+0x50>
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	f9 cf       	rjmp	.-14     	; 0x8ea <Endpoint_ConfigureEndpointTable+0x42>
     8f8:	22 95       	swap	r18
     8fa:	20 7f       	andi	r18, 0xF0	; 240
     8fc:	42 2b       	or	r20, r18
     8fe:	62 95       	swap	r22
     900:	66 0f       	add	r22, r22
     902:	66 0f       	add	r22, r22
     904:	60 7c       	andi	r22, 0xC0	; 192
     906:	99 1f       	adc	r25, r25
     908:	99 27       	eor	r25, r25
     90a:	99 1f       	adc	r25, r25
     90c:	69 2b       	or	r22, r25
     90e:	97 df       	rcall	.-210    	; 0x83e <Endpoint_ConfigureEndpoint_Prv>
     910:	81 11       	cpse	r24, r1
     912:	d6 cf       	rjmp	.-84     	; 0x8c0 <Endpoint_ConfigureEndpointTable+0x18>
     914:	e0 cf       	rjmp	.-64     	; 0x8d6 <Endpoint_ConfigureEndpointTable+0x2e>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     922:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
     926:	87 ff       	sbrs	r24, 7
     928:	11 c0       	rjmp	.+34     	; 0x94c <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     92a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     92e:	82 fd       	sbrc	r24, 2
     930:	05 c0       	rjmp	.+10     	; 0x93c <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     932:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     936:	81 11       	cpse	r24, r1
     938:	f8 cf       	rjmp	.-16     	; 0x92a <Endpoint_ClearStatusStage+0x8>
     93a:	11 c0       	rjmp	.+34     	; 0x95e <Endpoint_ClearStatusStage+0x3c>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     93c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     940:	8b 77       	andi	r24, 0x7B	; 123
     942:	0b c0       	rjmp	.+22     	; 0x95a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     944:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     948:	88 23       	and	r24, r24
     94a:	49 f0       	breq	.+18     	; 0x95e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     94c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     950:	80 ff       	sbrs	r24, 0
     952:	f8 cf       	rjmp	.-16     	; 0x944 <Endpoint_ClearStatusStage+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     958:	8e 77       	andi	r24, 0x7E	; 126
     95a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     95e:	08 95       	ret

00000960 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     960:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     964:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     968:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     96a:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     96e:	84 2f       	mov	r24, r20
     970:	81 70       	andi	r24, 0x01	; 1
     972:	40 ff       	sbrs	r20, 0
     974:	23 c0       	rjmp	.+70     	; 0x9bc <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     976:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     97a:	80 fd       	sbrc	r24, 0
     97c:	1d c0       	rjmp	.+58     	; 0x9b8 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     97e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     982:	88 23       	and	r24, r24
     984:	99 f0       	breq	.+38     	; 0x9ac <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     986:	85 30       	cpi	r24, 0x05	; 5
     988:	99 f0       	breq	.+38     	; 0x9b0 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     98a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     98e:	85 fd       	sbrc	r24, 5
     990:	11 c0       	rjmp	.+34     	; 0x9b4 <Endpoint_WaitUntilReady+0x54>
     992:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     996:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     99a:	24 17       	cp	r18, r20
     99c:	35 07       	cpc	r19, r21
     99e:	29 f3       	breq	.-54     	; 0x96a <Endpoint_WaitUntilReady+0xa>
     9a0:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <Endpoint_WaitUntilReady+0x48>
     9a4:	9a 01       	movw	r18, r20
     9a6:	e1 cf       	rjmp	.-62     	; 0x96a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     9a8:	84 e0       	ldi	r24, 0x04	; 4
     9aa:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9bc:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9c0:	42 ff       	sbrs	r20, 2
     9c2:	dd cf       	rjmp	.-70     	; 0x97e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     9c4:	08 95       	ret

000009c6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9c6:	41 d0       	rcall	.+130    	; 0xa4a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9c8:	43 d0       	rcall	.+134    	; 0xa50 <USB_INT_ClearAllInterrupts>
     9ca:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9ce:	8f 77       	andi	r24, 0x7F	; 127
     9d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     9d4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
     9d8:	80 68       	ori	r24, 0x80	; 128
     9da:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     9de:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9e2:	8f 7d       	andi	r24, 0xDF	; 223
     9e4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     9e8:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9ea:	89 bd       	out	0x29, r24	; 41
     9ec:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9ee:	89 bd       	out	0x29, r24	; 41
     9f0:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9f2:	00 fe       	sbrs	r0, 0
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <USB_ResetInterface+0x2a>
     9f6:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     9fa:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     9fe:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     a02:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a06:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	18 df       	rcall	.-464    	; 0x83e <Endpoint_ConfigureEndpoint_Prv>
     a0e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a12:	8e 7f       	andi	r24, 0xFE	; 254
     a14:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     a18:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a22:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a26:	88 60       	ori	r24, 0x08	; 8
     a28:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a2c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a30:	8e 7f       	andi	r24, 0xFE	; 254
     a32:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     a36:	08 95       	ret

00000a38 <USB_Init>:
     a38:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <USB_IsInitialized>

	USB_ResetInterface();
     a48:	be cf       	rjmp	.-132    	; 0x9c6 <USB_ResetInterface>

00000a4a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a4a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a4e:	08 95       	ret

00000a50 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a50:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     a54:	08 95       	ret

00000a56 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     a78:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     a7c:	82 ff       	sbrs	r24, 2
     a7e:	0a c0       	rjmp	.+20     	; 0xa94 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     a80:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a84:	82 ff       	sbrs	r24, 2
     a86:	06 c0       	rjmp	.+12     	; 0xa94 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     a88:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     a8c:	8b 7f       	andi	r24, 0xFB	; 251
     a8e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     a92:	4b dc       	rcall	.-1898   	; 0x32a <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     a94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     a98:	80 ff       	sbrs	r24, 0
     a9a:	17 c0       	rjmp	.+46     	; 0xaca <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     a9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     aa0:	80 ff       	sbrs	r24, 0
     aa2:	13 c0       	rjmp	.+38     	; 0xaca <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     aa4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     aa8:	8e 7f       	andi	r24, 0xFE	; 254
     aaa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     aae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     ab2:	80 61       	ori	r24, 0x10	; 16
     ab4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     ab8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     abc:	80 62       	ori	r24, 0x20	; 32
     abe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ac2:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     ac4:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     ac8:	12 dc       	rcall	.-2012   	; 0x2ee <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     aca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     ace:	84 ff       	sbrs	r24, 4
     ad0:	2f c0       	rjmp	.+94     	; 0xb30 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ad2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     ad6:	84 ff       	sbrs	r24, 4
     ad8:	2b c0       	rjmp	.+86     	; 0xb30 <__vector_11+0xda>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ade:	86 e0       	ldi	r24, 0x06	; 6
     ae0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ae2:	09 b4       	in	r0, 0x29	; 41
     ae4:	00 fe       	sbrs	r0, 0
     ae6:	fd cf       	rjmp	.-6      	; 0xae2 <__vector_11+0x8c>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ae8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     aec:	8f 7d       	andi	r24, 0xDF	; 223
     aee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     af2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     af6:	8f 7e       	andi	r24, 0xEF	; 239
     af8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     afc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b00:	8f 7e       	andi	r24, 0xEF	; 239
     b02:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b06:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b0a:	81 60       	ori	r24, 0x01	; 1
     b0c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b10:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <USB_Device_ConfigurationNumber>
     b14:	88 23       	and	r24, r24
     b16:	11 f0       	breq	.+4      	; 0xb1c <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
     b18:	84 e0       	ldi	r24, 0x04	; 4
     b1a:	07 c0       	rjmp	.+14     	; 0xb2a <__vector_11+0xd4>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b1c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     b20:	87 fd       	sbrc	r24, 7
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <__vector_11+0xd2>
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <__vector_11+0xd4>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     b2e:	dd db       	rcall	.-2118   	; 0x2ea <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b30:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b34:	83 ff       	sbrs	r24, 3
     b36:	22 c0       	rjmp	.+68     	; 0xb7c <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     b38:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b3c:	83 ff       	sbrs	r24, 3
     b3e:	1e c0       	rjmp	.+60     	; 0xb7c <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     b40:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     b44:	87 7f       	andi	r24, 0xF7	; 247
     b46:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     b50:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b62:	8e 7f       	andi	r24, 0xFE	; 254
     b64:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b68:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b6c:	80 61       	ori	r24, 0x10	; 16
     b6e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b72:	42 e0       	ldi	r20, 0x02	; 2
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     b78:	62 de       	rcall	.-828    	; 0x83e <Endpoint_ConfigureEndpoint_Prv>
     b7a:	72 d1       	rcall	.+740    	; 0xe60 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	aa 97       	sbiw	r28, 0x2a	; 42
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	e8 e4       	ldi	r30, 0x48	; 72
     bb6:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     bb8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     bbc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     bbe:	22 e0       	ldi	r18, 0x02	; 2
     bc0:	e0 35       	cpi	r30, 0x50	; 80
     bc2:	f2 07       	cpc	r31, r18
     bc4:	c9 f7       	brne	.-14     	; 0xbb8 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bc6:	ab db       	rcall	.-2218   	; 0x31e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
     bcc:	83 ff       	sbrs	r24, 3
     bce:	30 c1       	rjmp	.+608    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bd0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     bd4:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <USB_ControlRequest+0x1>
     bd8:	95 30       	cpi	r25, 0x05	; 5
     bda:	09 f4       	brne	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0x40>
     bdc:	83 c0       	rjmp	.+262    	; 0xce4 <USB_Device_ProcessControlRequest+0x146>
     bde:	30 f4       	brcc	.+12     	; 0xbec <USB_Device_ProcessControlRequest+0x4e>
     be0:	91 30       	cpi	r25, 0x01	; 1
     be2:	a9 f1       	breq	.+106    	; 0xc4e <USB_Device_ProcessControlRequest+0xb0>
     be4:	68 f0       	brcs	.+26     	; 0xc00 <USB_Device_ProcessControlRequest+0x62>
     be6:	93 30       	cpi	r25, 0x03	; 3
     be8:	91 f1       	breq	.+100    	; 0xc4e <USB_Device_ProcessControlRequest+0xb0>
     bea:	22 c1       	rjmp	.+580    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
     bec:	98 30       	cpi	r25, 0x08	; 8
     bee:	09 f4       	brne	.+2      	; 0xbf2 <USB_Device_ProcessControlRequest+0x54>
     bf0:	ef c0       	rjmp	.+478    	; 0xdd0 <USB_Device_ProcessControlRequest+0x232>
     bf2:	99 30       	cpi	r25, 0x09	; 9
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <USB_Device_ProcessControlRequest+0x5a>
     bf6:	fb c0       	rjmp	.+502    	; 0xdee <USB_Device_ProcessControlRequest+0x250>
     bf8:	96 30       	cpi	r25, 0x06	; 6
     bfa:	09 f0       	breq	.+2      	; 0xbfe <USB_Device_ProcessControlRequest+0x60>
     bfc:	19 c1       	rjmp	.+562    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
     bfe:	94 c0       	rjmp	.+296    	; 0xd28 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c00:	80 38       	cpi	r24, 0x80	; 128
     c02:	21 f0       	breq	.+8      	; 0xc0c <USB_Device_ProcessControlRequest+0x6e>
     c04:	82 38       	cpi	r24, 0x82	; 130
     c06:	09 f0       	breq	.+2      	; 0xc0a <USB_Device_ProcessControlRequest+0x6c>
     c08:	13 c1       	rjmp	.+550    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     c0c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c10:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <USB_Device_RemoteWakeupEnabled>
     c14:	99 23       	and	r25, r25
     c16:	89 f0       	breq	.+34     	; 0xc3a <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c18:	82 60       	ori	r24, 0x02	; 2
     c1a:	0f c0       	rjmp	.+30     	; 0xc3a <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c1c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest+0x4>
     c20:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     c22:	85 30       	cpi	r24, 0x05	; 5
     c24:	08 f0       	brcs	.+2      	; 0xc28 <USB_Device_ProcessControlRequest+0x8a>
     c26:	04 c1       	rjmp	.+520    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c28:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c2c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     c30:	85 fb       	bst	r24, 5
     c32:	88 27       	eor	r24, r24
     c34:	80 f9       	bld	r24, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c36:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     c3e:	97 7f       	andi	r25, 0xF7	; 247
     c40:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c44:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
     c48:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     c4c:	cc c0       	rjmp	.+408    	; 0xde6 <USB_Device_ProcessControlRequest+0x248>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c4e:	28 2f       	mov	r18, r24
     c50:	2d 7f       	andi	r18, 0xFD	; 253
     c52:	09 f0       	breq	.+2      	; 0xc56 <USB_Device_ProcessControlRequest+0xb8>
     c54:	ed c0       	rjmp	.+474    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c56:	88 23       	and	r24, r24
     c58:	19 f0       	breq	.+6      	; 0xc60 <USB_Device_ProcessControlRequest+0xc2>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	61 f0       	breq	.+24     	; 0xc76 <USB_Device_ProcessControlRequest+0xd8>
     c5e:	e8 c0       	rjmp	.+464    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c60:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	09 f0       	breq	.+2      	; 0xc6a <USB_Device_ProcessControlRequest+0xcc>
     c68:	e3 c0       	rjmp	.+454    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c6a:	93 30       	cpi	r25, 0x03	; 3
     c6c:	09 f0       	breq	.+2      	; 0xc70 <USB_Device_ProcessControlRequest+0xd2>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <USB_Device_RemoteWakeupEnabled>
     c74:	2e c0       	rjmp	.+92     	; 0xcd2 <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c76:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     c7a:	81 11       	cpse	r24, r1
     c7c:	2a c0       	rjmp	.+84     	; 0xcd2 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c7e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest+0x4>
     c82:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     c84:	2f ef       	ldi	r18, 0xFF	; 255
     c86:	28 0f       	add	r18, r24
     c88:	24 30       	cpi	r18, 0x04	; 4
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <USB_Device_ProcessControlRequest+0xf0>
     c8c:	d1 c0       	rjmp	.+418    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c8e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c92:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c96:	20 ff       	sbrs	r18, 0
     c98:	1c c0       	rjmp	.+56     	; 0xcd2 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c9a:	93 30       	cpi	r25, 0x03	; 3
     c9c:	21 f4       	brne	.+8      	; 0xca6 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c9e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	14 c0       	rjmp	.+40     	; 0xcce <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ca6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     caa:	90 61       	ori	r25, 0x10	; 16
     cac:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	a9 01       	movw	r20, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <USB_Device_ProcessControlRequest+0x11e>
     cb8:	44 0f       	add	r20, r20
     cba:	55 1f       	adc	r21, r21
     cbc:	8a 95       	dec	r24
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <USB_Device_ProcessControlRequest+0x11a>
     cc0:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
     cc4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cc8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cd2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     cda:	87 7f       	andi	r24, 0xF7	; 247
     cdc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ce0:	20 de       	rcall	.-960    	; 0x922 <Endpoint_ClearStatusStage>
     ce2:	a6 c0       	rjmp	.+332    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ce4:	81 11       	cpse	r24, r1
     ce6:	a4 c0       	rjmp	.+328    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ce8:	10 91 4a 02 	lds	r17, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     cec:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     cee:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     cf2:	80 78       	andi	r24, 0x80	; 128
     cf4:	81 2b       	or	r24, r17
     cf6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     cfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     cfe:	87 7f       	andi	r24, 0xF7	; 247
     d00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d04:	0e de       	rcall	.-996    	; 0x922 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
     d0a:	80 ff       	sbrs	r24, 0
     d0c:	fc cf       	rjmp	.-8      	; 0xd06 <USB_Device_ProcessControlRequest+0x168>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     d0e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d18:	11 11       	cpse	r17, r1
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <USB_Device_ProcessControlRequest+0x182>
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <USB_Device_ProcessControlRequest+0x184>
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <USB_DeviceState>
     d26:	84 c0       	rjmp	.+264    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d28:	80 58       	subi	r24, 0x80	; 128
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <USB_Device_ProcessControlRequest+0x192>
     d2e:	80 c0       	rjmp	.+256    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d30:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     d34:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
     d38:	8c 3d       	cpi	r24, 0xDC	; 220
     d3a:	53 e0       	ldi	r21, 0x03	; 3
     d3c:	95 07       	cpc	r25, r21
     d3e:	71 f5       	brne	.+92     	; 0xd9c <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d44:	8a e2       	ldi	r24, 0x2A	; 42
     d46:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d48:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d4a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d4c:	de 01       	movw	r26, r28
     d4e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d50:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d52:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d54:	51 e2       	ldi	r21, 0x21	; 33
     d56:	e3 2f       	mov	r30, r19
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
     d5e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     d60:	20 ff       	sbrs	r18, 0
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
     d64:	e2 95       	swap	r30
     d66:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     d68:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     d6a:	ef 70       	andi	r30, 0x0F	; 15
     d6c:	8e 2f       	mov	r24, r30
     d6e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d70:	ea 30       	cpi	r30, 0x0A	; 10
     d72:	10 f0       	brcs	.+4      	; 0xd78 <USB_Device_ProcessControlRequest+0x1da>
     d74:	c7 96       	adiw	r24, 0x37	; 55
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <USB_Device_ProcessControlRequest+0x1dc>
     d78:	c0 96       	adiw	r24, 0x30	; 48
     d7a:	8d 93       	st	X+, r24
     d7c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d7e:	2f 5f       	subi	r18, 0xFF	; 255
     d80:	24 31       	cpi	r18, 0x14	; 20
     d82:	49 f7       	brne	.-46     	; 0xd56 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d84:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d8a:	87 7f       	andi	r24, 0xF7	; 247
     d8c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d90:	6a e2       	ldi	r22, 0x2A	; 42
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	5d dc       	rcall	.-1862   	; 0x654 <Endpoint_Write_Control_Stream_LE>
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d9c:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <USB_ControlRequest+0x4>
     da0:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <USB_ControlRequest+0x5>
     da4:	ae 01       	movw	r20, r28
     da6:	4f 5f       	subi	r20, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	b1 db       	rcall	.-2206   	; 0x50e <CALLBACK_USB_GetDescriptor>
     dac:	bc 01       	movw	r22, r24
     dae:	89 2b       	or	r24, r25
     db0:	09 f4       	brne	.+2      	; 0xdb4 <USB_Device_ProcessControlRequest+0x216>
     db2:	3e c0       	rjmp	.+124    	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
     db4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     db8:	97 7f       	andi	r25, 0xF7	; 247
     dba:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	df dc       	rcall	.-1602   	; 0x782 <Endpoint_Write_Control_PStream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dc8:	8b 77       	andi	r24, 0x7B	; 123
     dca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dce:	30 c0       	rjmp	.+96     	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     dd0:	80 38       	cpi	r24, 0x80	; 128
     dd2:	71 f5       	brne	.+92     	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dd8:	87 7f       	andi	r24, 0xF7	; 247
     dda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     dde:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     de2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     de6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dea:	8e 77       	andi	r24, 0x7E	; 126
     dec:	77 cf       	rjmp	.-274    	; 0xcdc <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dee:	81 11       	cpse	r24, r1
     df0:	1f c0       	rjmp	.+62     	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     df2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     df6:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
     dfa:	99 27       	eor	r25, r25
     dfc:	02 97       	sbiw	r24, 0x02	; 2
     dfe:	c4 f4       	brge	.+48     	; 0xe30 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e04:	87 7f       	andi	r24, 0xF7	; 247
     e06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e0a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     e0e:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     e12:	87 dd       	rcall	.-1266   	; 0x922 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     e14:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <USB_Device_ConfigurationNumber>
     e18:	81 11       	cpse	r24, r1
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <USB_Device_ProcessControlRequest+0x28a>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e1c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e20:	87 fd       	sbrc	r24, 7
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <USB_Device_ProcessControlRequest+0x28a>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <USB_Device_ProcessControlRequest+0x28c>
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     e2e:	61 da       	rcall	.-2878   	; 0x2f2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e34:	83 ff       	sbrs	r24, 3
     e36:	0a c0       	rjmp	.+20     	; 0xe4c <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e3c:	87 7f       	andi	r24, 0xF7	; 247
     e3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e42:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     e46:	80 62       	ori	r24, 0x20	; 32
     e48:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e4c:	aa 96       	adiw	r28, 0x2a	; 42
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	08 95       	ret

00000e60 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     e60:	08 95       	ret

00000e62 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e62:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e64:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
     e68:	88 23       	and	r24, r24
     e6a:	99 f0       	breq	.+38     	; 0xe92 <USB_USBTask+0x30>
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e6c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     e70:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e72:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     e76:	89 2f       	mov	r24, r25
     e78:	81 70       	andi	r24, 0x01	; 1
     e7a:	90 fd       	sbrc	r25, 0
     e7c:	80 e8       	ldi	r24, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e7e:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e80:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e88:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     e8a:	89 de       	rcall	.-750    	; 0xb9e <USB_Device_ProcessControlRequest>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e8c:	cf 70       	andi	r28, 0x0F	; 15
     e8e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e96:	6f 92       	push	r6
     e98:	7f 92       	push	r7
     e9a:	8f 92       	push	r8
     e9c:	9f 92       	push	r9
     e9e:	af 92       	push	r10
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <HID_Device_ProcessControlRequest+0x1e>
     eb4:	1f 92       	push	r1
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     ebc:	ad b6       	in	r10, 0x3d	; 61
     ebe:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ec0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     ec4:	83 ff       	sbrs	r24, 3
     ec6:	03 c1       	rjmp	.+518    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     ec8:	f7 01       	movw	r30, r14
     eca:	80 81       	ld	r24, Z
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <USB_ControlRequest+0x4>
     ed2:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <USB_ControlRequest+0x5>
     ed6:	28 17       	cp	r18, r24
     ed8:	39 07       	cpc	r19, r25
     eda:	09 f0       	breq	.+2      	; 0xede <HID_Device_ProcessControlRequest+0x48>
     edc:	f8 c0       	rjmp	.+496    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
     ede:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <USB_ControlRequest+0x1>
     ee2:	83 30       	cpi	r24, 0x03	; 3
     ee4:	09 f4       	brne	.+2      	; 0xee8 <HID_Device_ProcessControlRequest+0x52>
     ee6:	9a c0       	rjmp	.+308    	; 0x101c <HID_Device_ProcessControlRequest+0x186>
     ee8:	30 f4       	brcc	.+12     	; 0xef6 <HID_Device_ProcessControlRequest+0x60>
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	71 f0       	breq	.+28     	; 0xf0a <HID_Device_ProcessControlRequest+0x74>
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	09 f4       	brne	.+2      	; 0xef4 <HID_Device_ProcessControlRequest+0x5e>
     ef2:	d1 c0       	rjmp	.+418    	; 0x1096 <HID_Device_ProcessControlRequest+0x200>
     ef4:	ec c0       	rjmp	.+472    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
     ef6:	8a 30       	cpi	r24, 0x0A	; 10
     ef8:	09 f4       	brne	.+2      	; 0xefc <HID_Device_ProcessControlRequest+0x66>
     efa:	b5 c0       	rjmp	.+362    	; 0x1066 <HID_Device_ProcessControlRequest+0x1d0>
     efc:	8b 30       	cpi	r24, 0x0B	; 11
     efe:	09 f4       	brne	.+2      	; 0xf02 <HID_Device_ProcessControlRequest+0x6c>
     f00:	9e c0       	rjmp	.+316    	; 0x103e <HID_Device_ProcessControlRequest+0x1a8>
     f02:	89 30       	cpi	r24, 0x09	; 9
     f04:	09 f0       	breq	.+2      	; 0xf08 <HID_Device_ProcessControlRequest+0x72>
     f06:	e3 c0       	rjmp	.+454    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
     f08:	4c c0       	rjmp	.+152    	; 0xfa2 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f0a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
     f0e:	81 3a       	cpi	r24, 0xA1	; 161
     f10:	09 f0       	breq	.+2      	; 0xf14 <HID_Device_ProcessControlRequest+0x7e>
     f12:	dd c0       	rjmp	.+442    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
			{
     f14:	8d b6       	in	r8, 0x3d	; 61
     f16:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
     f18:	1a 82       	std	Y+2, r1	; 0x02
     f1a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     f1c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     f20:	10 91 4b 02 	lds	r17, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
     f24:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f26:	f7 01       	movw	r30, r14
     f28:	80 85       	ldd	r24, Z+8	; 0x08
     f2a:	48 2f       	mov	r20, r24
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	8d b7       	in	r24, 0x3d	; 61
     f30:	9e b7       	in	r25, 0x3e	; 62
     f32:	84 1b       	sub	r24, r20
     f34:	95 0b       	sbc	r25, r21
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	9e bf       	out	0x3e, r25	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	8d bf       	out	0x3d, r24	; 61
     f40:	ed b7       	in	r30, 0x3d	; 61
     f42:	fe b7       	in	r31, 0x3e	; 62
     f44:	31 96       	adiw	r30, 0x01	; 1
     f46:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	cf 01       	movw	r24, r30
     f4e:	b8 d1       	rcall	.+880    	; 0x12c0 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     f50:	4f ef       	ldi	r20, 0xFF	; 255
     f52:	41 0f       	add	r20, r17
     f54:	8e 01       	movw	r16, r28
     f56:	0f 5f       	subi	r16, 0xFF	; 255
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	96 01       	movw	r18, r12
     f5c:	be 01       	movw	r22, r28
     f5e:	6d 5f       	subi	r22, 0xFD	; 253
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	c7 01       	movw	r24, r14
     f64:	f9 d9       	rcall	.-3086   	; 0x358 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f66:	f7 01       	movw	r30, r14
     f68:	86 81       	ldd	r24, Z+6	; 0x06
     f6a:	97 81       	ldd	r25, Z+7	; 0x07
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	21 f0       	breq	.+8      	; 0xf78 <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     f70:	40 85       	ldd	r20, Z+8	; 0x08
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	b6 01       	movw	r22, r12
     f76:	9b d1       	rcall	.+822    	; 0x12ae <memcpy>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f78:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f80:	87 7f       	andi	r24, 0xF7	; 247
     f82:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f8a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     f8e:	69 81       	ldd	r22, Y+1	; 0x01
     f90:	7a 81       	ldd	r23, Y+2	; 0x02
     f92:	c6 01       	movw	r24, r12
     f94:	5f db       	rcall	.-2370   	; 0x654 <Endpoint_Write_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f9a:	8b 77       	andi	r24, 0x7B	; 123
     f9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     fa0:	37 c0       	rjmp	.+110    	; 0x1010 <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fa2:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
     fa6:	81 32       	cpi	r24, 0x21	; 33
     fa8:	09 f0       	breq	.+2      	; 0xfac <HID_Device_ProcessControlRequest+0x116>
     faa:	91 c0       	rjmp	.+290    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
			{
     fac:	8d b6       	in	r8, 0x3d	; 61
     fae:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     fb0:	00 91 4e 02 	lds	r16, 0x024E	; 0x80024e <USB_ControlRequest+0x6>
     fb4:	10 91 4f 02 	lds	r17, 0x024F	; 0x80024f <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     fb8:	70 90 4a 02 	lds	r7, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
     fbc:	60 90 4b 02 	lds	r6, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     fc0:	8d b7       	in	r24, 0x3d	; 61
     fc2:	9e b7       	in	r25, 0x3e	; 62
     fc4:	80 1b       	sub	r24, r16
     fc6:	91 0b       	sbc	r25, r17
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	9e bf       	out	0x3e, r25	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	8d bf       	out	0x3d, r24	; 61
     fd2:	ed b7       	in	r30, 0x3d	; 61
     fd4:	fe b7       	in	r31, 0x3e	; 62
     fd6:	31 96       	adiw	r30, 0x01	; 1
     fd8:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     fde:	87 7f       	andi	r24, 0xF7	; 247
     fe0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     fe4:	b8 01       	movw	r22, r16
     fe6:	cf 01       	movw	r24, r30
     fe8:	90 db       	rcall	.-2272   	; 0x70a <Endpoint_Read_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     fee:	8e 77       	andi	r24, 0x7E	; 126
     ff0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     ff4:	21 e0       	ldi	r18, 0x01	; 1
     ff6:	71 10       	cpse	r7, r1
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <HID_Device_ProcessControlRequest+0x166>
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	02 1b       	sub	r16, r18
    1000:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1002:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1004:	3d 1d       	adc	r19, r13
    1006:	4f ef       	ldi	r20, 0xFF	; 255
    1008:	46 0d       	add	r20, r6
    100a:	67 2d       	mov	r22, r7
    100c:	c7 01       	movw	r24, r14
    100e:	1c da       	rcall	.-3016   	; 0x448 <CALLBACK_HID_Device_ProcessHIDReport>
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	9e be       	out	0x3e, r9	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	8d be       	out	0x3d, r8	; 61
    101a:	59 c0       	rjmp	.+178    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    101c:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
    1020:	81 3a       	cpi	r24, 0xA1	; 161
    1022:	09 f0       	breq	.+2      	; 0x1026 <HID_Device_ProcessControlRequest+0x190>
    1024:	54 c0       	rjmp	.+168    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1026:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    102a:	87 7f       	andi	r24, 0xF7	; 247
    102c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1030:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1034:	80 ff       	sbrs	r24, 0
    1036:	fc cf       	rjmp	.-8      	; 0x1030 <HID_Device_ProcessControlRequest+0x19a>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1038:	f7 01       	movw	r30, r14
    103a:	81 85       	ldd	r24, Z+9	; 0x09
    103c:	40 c0       	rjmp	.+128    	; 0x10be <HID_Device_ProcessControlRequest+0x228>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    103e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
    1042:	81 32       	cpi	r24, 0x21	; 33
    1044:	09 f0       	breq	.+2      	; 0x1048 <HID_Device_ProcessControlRequest+0x1b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1046:	43 c0       	rjmp	.+134    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
    1048:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    104c:	87 7f       	andi	r24, 0xF7	; 247
    104e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1052:	67 dc       	rcall	.-1842   	; 0x922 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1054:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	91 11       	cpse	r25, r1
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <HID_Device_ProcessControlRequest+0x1ca>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	f7 01       	movw	r30, r14
    1062:	81 87       	std	Z+9, r24	; 0x09
    1064:	34 c0       	rjmp	.+104    	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1066:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
    106a:	81 32       	cpi	r24, 0x21	; 33
    106c:	81 f5       	brne	.+96     	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
    106e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1072:	87 7f       	andi	r24, 0xF7	; 247
    1074:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1078:	54 dc       	rcall	.-1880   	; 0x922 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    107a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_ControlRequest+0x2>
    107e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <USB_ControlRequest+0x3>
    1082:	88 27       	eor	r24, r24
    1084:	36 e0       	ldi	r19, 0x06	; 6
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	3a 95       	dec	r19
    108c:	e1 f7       	brne	.-8      	; 0x1086 <HID_Device_ProcessControlRequest+0x1f0>
    108e:	f7 01       	movw	r30, r14
    1090:	95 87       	std	Z+13, r25	; 0x0d
    1092:	84 87       	std	Z+12, r24	; 0x0c
    1094:	1c c0       	rjmp	.+56     	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1096:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_ControlRequest>
    109a:	81 3a       	cpi	r24, 0xA1	; 161
    109c:	c1 f4       	brne	.+48     	; 0x10ce <HID_Device_ProcessControlRequest+0x238>
    109e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10a2:	87 7f       	andi	r24, 0xF7	; 247
    10a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    10ac:	80 ff       	sbrs	r24, 0
    10ae:	fc cf       	rjmp	.-8      	; 0x10a8 <HID_Device_ProcessControlRequest+0x212>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    10b0:	f7 01       	movw	r30, r14
    10b2:	84 85       	ldd	r24, Z+12	; 0x0c
    10b4:	95 85       	ldd	r25, Z+13	; 0x0d
    10b6:	96 95       	lsr	r25
    10b8:	87 95       	ror	r24
    10ba:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10bc:	87 95       	ror	r24
    10be:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10c6:	8e 77       	andi	r24, 0x7E	; 126
    10c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10cc:	2a dc       	rcall	.-1964   	; 0x922 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	be be       	out	0x3e, r11	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	ad be       	out	0x3d, r10	; 61
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	bf 90       	pop	r11
    10f0:	af 90       	pop	r10
    10f2:	9f 90       	pop	r9
    10f4:	8f 90       	pop	r8
    10f6:	7f 90       	pop	r7
    10f8:	6f 90       	pop	r6
    10fa:	08 95       	ret

000010fc <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    10fc:	fc 01       	movw	r30, r24
    10fe:	39 96       	adiw	r30, 0x09	; 9
    1100:	27 e0       	ldi	r18, 0x07	; 7
    1102:	df 01       	movw	r26, r30
    1104:	1d 92       	st	X+, r1
    1106:	2a 95       	dec	r18
    1108:	e9 f7       	brne	.-6      	; 0x1104 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    110a:	21 e0       	ldi	r18, 0x01	; 1
    110c:	fc 01       	movw	r30, r24
    110e:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1110:	24 ef       	ldi	r18, 0xF4	; 244
    1112:	31 e0       	ldi	r19, 0x01	; 1
    1114:	35 87       	std	Z+13, r19	; 0x0d
    1116:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1118:	23 e0       	ldi	r18, 0x03	; 3
    111a:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	c3 cb       	rjmp	.-2170   	; 0x8a8 <Endpoint_ConfigureEndpointTable>

00001122 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1122:	5f 92       	push	r5
    1124:	6f 92       	push	r6
    1126:	7f 92       	push	r7
    1128:	8f 92       	push	r8
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	00 d0       	rcall	.+0      	; 0x1142 <HID_Device_USBTask+0x20>
    1142:	1f 92       	push	r1
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    114a:	ad b6       	in	r10, 0x3d	; 61
    114c:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    114e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_DeviceState>
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	09 f0       	breq	.+2      	; 0x1158 <HID_Device_USBTask+0x36>
    1156:	86 c0       	rjmp	.+268    	; 0x1264 <HID_Device_USBTask+0x142>
			 *  \return Current USB frame number from the USB controller.
			 */
			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1158:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    115c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1160:	f7 01       	movw	r30, r14
    1162:	22 85       	ldd	r18, Z+10	; 0x0a
    1164:	33 85       	ldd	r19, Z+11	; 0x0b
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	09 f4       	brne	.+2      	; 0x116e <HID_Device_USBTask+0x4c>
    116c:	7b c0       	rjmp	.+246    	; 0x1264 <HID_Device_USBTask+0x142>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    116e:	81 81       	ldd	r24, Z+1	; 0x01
    1170:	8f 70       	andi	r24, 0x0F	; 15
    1172:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *          on its direction.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1176:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    117a:	85 ff       	sbrs	r24, 5
    117c:	73 c0       	rjmp	.+230    	; 0x1264 <HID_Device_USBTask+0x142>
	{
    117e:	8d b6       	in	r8, 0x3d	; 61
    1180:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1182:	40 85       	ldd	r20, Z+8	; 0x08
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	8d b7       	in	r24, 0x3d	; 61
    1188:	9e b7       	in	r25, 0x3e	; 62
    118a:	84 1b       	sub	r24, r20
    118c:	95 0b       	sbc	r25, r21
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	9e bf       	out	0x3e, r25	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	8d bf       	out	0x3d, r24	; 61
    1198:	ed b7       	in	r30, 0x3d	; 61
    119a:	fe b7       	in	r31, 0x3e	; 62
    119c:	31 96       	adiw	r30, 0x01	; 1
    119e:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    11a0:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    11a2:	1a 82       	std	Y+2, r1	; 0x02
    11a4:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	cf 01       	movw	r24, r30
    11ac:	89 d0       	rcall	.+274    	; 0x12c0 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    11ae:	8e 01       	movw	r16, r28
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	96 01       	movw	r18, r12
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	be 01       	movw	r22, r28
    11ba:	6d 5f       	subi	r22, 0xFD	; 253
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	c7 01       	movw	r24, r14
    11c0:	cb d8       	rcall	.-3690   	; 0x358 <CALLBACK_HID_Device_CreateHIDReport>
    11c2:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    11c4:	f7 01       	movw	r30, r14
    11c6:	84 85       	ldd	r24, Z+12	; 0x0c
    11c8:	95 85       	ldd	r25, Z+13	; 0x0d
    11ca:	89 2b       	or	r24, r25
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <HID_Device_USBTask+0xb6>
    11ce:	11 e0       	ldi	r17, 0x01	; 1
    11d0:	86 85       	ldd	r24, Z+14	; 0x0e
    11d2:	97 85       	ldd	r25, Z+15	; 0x0f
    11d4:	89 2b       	or	r24, r25
    11d6:	09 f0       	breq	.+2      	; 0x11da <HID_Device_USBTask+0xb8>
    11d8:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    11da:	f7 01       	movw	r30, r14
    11dc:	66 80       	ldd	r6, Z+6	; 0x06
    11de:	77 80       	ldd	r7, Z+7	; 0x07
    11e0:	61 14       	cp	r6, r1
    11e2:	71 04       	cpc	r7, r1
    11e4:	81 f0       	breq	.+32     	; 0x1206 <HID_Device_USBTask+0xe4>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    11e6:	49 81       	ldd	r20, Y+1	; 0x01
    11e8:	5a 81       	ldd	r21, Y+2	; 0x02
    11ea:	b3 01       	movw	r22, r6
    11ec:	c6 01       	movw	r24, r12
    11ee:	52 d0       	rcall	.+164    	; 0x1294 <memcmp>
    11f0:	01 e0       	ldi	r16, 0x01	; 1
    11f2:	89 2b       	or	r24, r25
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <HID_Device_USBTask+0xd6>
    11f6:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    11f8:	f7 01       	movw	r30, r14
    11fa:	40 85       	ldd	r20, Z+8	; 0x08
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	b6 01       	movw	r22, r12
    1200:	c3 01       	movw	r24, r6
    1202:	55 d0       	rcall	.+170    	; 0x12ae <memcpy>
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <HID_Device_USBTask+0xe6>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1206:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	89 2b       	or	r24, r25
    120e:	f1 f0       	breq	.+60     	; 0x124c <HID_Device_USBTask+0x12a>
    1210:	51 10       	cpse	r5, r1
    1212:	04 c0       	rjmp	.+8      	; 0x121c <HID_Device_USBTask+0xfa>
    1214:	01 11       	cpse	r16, r1
    1216:	02 c0       	rjmp	.+4      	; 0x121c <HID_Device_USBTask+0xfa>
    1218:	10 ff       	sbrs	r17, 0
    121a:	18 c0       	rjmp	.+48     	; 0x124c <HID_Device_USBTask+0x12a>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    121c:	f7 01       	movw	r30, r14
    121e:	84 85       	ldd	r24, Z+12	; 0x0c
    1220:	95 85       	ldd	r25, Z+13	; 0x0d
    1222:	97 87       	std	Z+15, r25	; 0x0f
    1224:	86 87       	std	Z+14, r24	; 0x0e
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1226:	81 81       	ldd	r24, Z+1	; 0x01
    1228:	8f 70       	andi	r24, 0x0F	; 15
    122a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1232:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1236:	69 81       	ldd	r22, Y+1	; 0x01
    1238:	7a 81       	ldd	r23, Y+2	; 0x02
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	c6 01       	movw	r24, r12
    1240:	bf d9       	rcall	.-3202   	; 0x5c0 <Endpoint_Write_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1242:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1246:	8e 77       	andi	r24, 0x7E	; 126
    1248:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    124c:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    1250:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1254:	f7 01       	movw	r30, r14
    1256:	93 87       	std	Z+11, r25	; 0x0b
    1258:	82 87       	std	Z+10, r24	; 0x0a
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	9e be       	out	0x3e, r9	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	8d be       	out	0x3d, r8	; 61
	}
}
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	be be       	out	0x3e, r11	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	ad be       	out	0x3d, r10	; 61
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	bf 90       	pop	r11
    1286:	af 90       	pop	r10
    1288:	9f 90       	pop	r9
    128a:	8f 90       	pop	r8
    128c:	7f 90       	pop	r7
    128e:	6f 90       	pop	r6
    1290:	5f 90       	pop	r5
    1292:	08 95       	ret

00001294 <memcmp>:
    1294:	fb 01       	movw	r30, r22
    1296:	dc 01       	movw	r26, r24
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <memcmp+0xe>
    129a:	8d 91       	ld	r24, X+
    129c:	01 90       	ld	r0, Z+
    129e:	80 19       	sub	r24, r0
    12a0:	21 f4       	brne	.+8      	; 0x12aa <memcmp+0x16>
    12a2:	41 50       	subi	r20, 0x01	; 1
    12a4:	50 40       	sbci	r21, 0x00	; 0
    12a6:	c8 f7       	brcc	.-14     	; 0x129a <memcmp+0x6>
    12a8:	88 1b       	sub	r24, r24
    12aa:	99 0b       	sbc	r25, r25
    12ac:	08 95       	ret

000012ae <memcpy>:
    12ae:	fb 01       	movw	r30, r22
    12b0:	dc 01       	movw	r26, r24
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <memcpy+0xa>
    12b4:	01 90       	ld	r0, Z+
    12b6:	0d 92       	st	X+, r0
    12b8:	41 50       	subi	r20, 0x01	; 1
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	d8 f7       	brcc	.-10     	; 0x12b4 <memcpy+0x6>
    12be:	08 95       	ret

000012c0 <memset>:
    12c0:	dc 01       	movw	r26, r24
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <memset+0x6>
    12c4:	6d 93       	st	X+, r22
    12c6:	41 50       	subi	r20, 0x01	; 1
    12c8:	50 40       	sbci	r21, 0x00	; 0
    12ca:	e0 f7       	brcc	.-8      	; 0x12c4 <memset+0x4>
    12cc:	08 95       	ret

000012ce <_exit>:
    12ce:	f8 94       	cli

000012d0 <__stop_program>:
    12d0:	ff cf       	rjmp	.-2      	; 0x12d0 <__stop_program>
